<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// Copyright (c) Six Labors and contributors.
// Licensed under the Apache License, Version 2.0.

// <auto-generated />

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
<#+
	static readonly string[] CommonPixelTypeNames = { "Argb32", "Bgr24", "Bgra32", "Gray8", "Gray16", "Rgb24", "Rgba32", "Rgb48", "Rgba64" };

	void GenerateDefaultSelfConversionMethods(string pixelType)
    {
		#>

			/// <inheritdoc />
            internal override void From<#=pixelType#>(ReadOnlySpan<<#=pixelType#>> source, Span<<#=pixelType#>> destPixels, int count)
            {
                GuardSpans(source, nameof(source), destPixels, nameof(destPixels), count);

                source.Slice(0, count).CopyTo(destPixels);
            }

            /// <inheritdoc />
            internal override void To<#=pixelType#>(ReadOnlySpan<<#=pixelType#>> sourcePixels, Span<<#=pixelType#>> destPixels, int count)
            {
                GuardSpans(sourcePixels, nameof(sourcePixels), destPixels, nameof(destPixels), count);

                sourcePixels.Slice(0, count).CopyTo(destPixels);
            }

		<#+
    }

	void GenerateDefaultConvertToMethod(string fromPixelType, string toPixelType)
    {
        #>

			/// <inheritdoc />
            internal override void To<#=toPixelType#>(ReadOnlySpan<<#=fromPixelType#>> sourcePixels, Span<<#=toPixelType#>> destPixels, int count)
            {
                GuardSpans(sourcePixels, nameof(sourcePixels), destPixels, nameof(destPixels), count);

                ref <#=fromPixelType#> sourceRef = ref MemoryMarshal.GetReference(sourcePixels);
                ref <#=toPixelType#> destRef = ref MemoryMarshal.GetReference(destPixels);

                for (int i = 0; i < count; i++)
                {
                    ref <#=fromPixelType#> sp = ref Unsafe.Add(ref sourceRef, i);
                    ref <#=toPixelType#> dp = ref Unsafe.Add(ref destRef, i);

                    dp.From<#=fromPixelType#>(sp);
                }
            }
		<#+
    }

	void GenerateAllDefaultConversionMethods(string pixelType)
	{
		GenerateDefaultSelfConversionMethods(pixelType);

		var allOtherPixelTypes = CommonPixelTypeNames.Where(p => p != pixelType);

		foreach (string destPixelType in allOtherPixelTypes)
		{
			GenerateDefaultConvertToMethod(pixelType, destPixelType);
        }
    }
#>