<#@include file="RgbaCompatible.Common.ttinclude" #>
<#@ output extension=".cs" #>

namespace SixLabors.ImageSharp.PixelFormats
{
    /// <content>
    /// Provides optimized overrides for bulk operations.
    /// </content>
    public partial struct Argb32
    {
        /// <summary>
        /// Provides optimized overrides for bulk operations.
        /// </summary>
        internal class PixelOperations : PixelOperations<Argb32>
        {
            /// <inheritdoc />
            internal override void FromArgb32(ReadOnlySpan<Argb32> source, Span<Argb32> destPixels, int count)
            {
                GuardSpans(source, nameof(source), destPixels, nameof(destPixels), count);

                source.Slice(0, count).CopyTo(destPixels);
            }

            /// <inheritdoc />
            internal override void ToArgb32(ReadOnlySpan<Argb32> sourcePixels, Span<Argb32> destPixels, int count)
            {
                GuardSpans(sourcePixels, nameof(sourcePixels), destPixels, nameof(destPixels), count);

                sourcePixels.Slice(0, count).CopyTo(destPixels);
            }

			<#
    GenerateDefaultConvertToMethod("Argb32", "Bgr24");
    GenerateDefaultConvertToMethod("Argb32", "Bgra32");
    GenerateDefaultConvertToMethod("Argb32", "Gray8");
    GenerateDefaultConvertToMethod("Argb32", "Gray16");
    GenerateDefaultConvertToMethod("Argb32", "Rgb24");
    GenerateDefaultConvertToMethod("Argb32", "Rgba32");
    GenerateDefaultConvertToMethod("Argb32", "Rgb48");
    GenerateDefaultConvertToMethod("Argb32", "Rgba64");
			#>

		}
	}
}