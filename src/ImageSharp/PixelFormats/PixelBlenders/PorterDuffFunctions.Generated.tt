<#
// <copyright file="PorterDuffFunctions.Generated.tt" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <autogenerated />
// <copyright file="PorterDuffFunctions.Generated.cs" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>

namespace ImageSharp.PixelFormats.PixelBlenders
{
    using System.Numerics;
    using System.Runtime.CompilerServices;


    internal static partial class PorterDuffFunctions
    {
    
<#
    
    void GeneratePixelBlender (string blender)
    {
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TPixel <#=blender#><TPixel>(TPixel backdrop, TPixel source, float amount)
            where TPixel : struct, IPixel<TPixel>
        {
            TPixel dest = default(TPixel);
            dest.PackFromVector4(<#=blender#>(backdrop.ToVector4(), source.ToVector4(), amount));
            return dest;
        }

<#
    }

    void GenerateVectorCompositor(string name, string sourceVar, string destVar, string blendVar)
    {
        if(sourceVar == "0") sourceVar= "Vector4.Zero";
        if(destVar == "0") destVar= "Vector4.Zero";
        if(blendVar == "0") blendVar= "Vector4.Zero";
        
        if(sourceVar == "s") sourceVar= "source";
        if(destVar == "s") destVar= "source";
        if(blendVar == "s") blendVar= "source";

        if(sourceVar == "d") sourceVar= "backdrop";
        if(destVar == "d") destVar= "backdrop";
        if(blendVar == "d") blendVar= "backdrop";
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Vector4 <#=name#>(Vector4 backdrop, Vector4 source, float amount)
        {
<#
        if(sourceVar == "Vector4.Zero")
        {
#>
            return <#=destVar#>;
<#
        }else{ 
#>
            <#=sourceVar#>.W *= amount;
            if (<#=sourceVar#>.W == 0)
            {
                return <#=destVar#>;
            }
           
            return Compose(<#=destVar#>, <#=sourceVar#>, <#=blendVar#>);
<#
        }
#>
        }

<#
    }

    
        GenerateVectorCompositor("Src", "s", "0", "s");
        GenerateVectorCompositor("Atop", "0", "d", "s");
        GenerateVectorCompositor("Over", "s", "d", "s");
        GenerateVectorCompositor("In", "0", "0", "s");
        GenerateVectorCompositor("Out", "s", "0", "0");
        GenerateVectorCompositor("Dest", "0", "d", "d");
        GenerateVectorCompositor("DestAtop", "s", "0", "d");
        GenerateVectorCompositor("DestOver", "s", "d", "d");
        GenerateVectorCompositor("DestIn", "0", "0", "d");
        GenerateVectorCompositor("DestOut", "0", "d", "0");
        GenerateVectorCompositor("Clear", "0", "0", "0");
        GenerateVectorCompositor("Xor", "s", "d", "0");

        
        GeneratePixelBlender("Normal");
        GeneratePixelBlender("Multiply");
        GeneratePixelBlender("Add");
        GeneratePixelBlender("Substract");
        GeneratePixelBlender("Screen");
        GeneratePixelBlender("Darken");
        GeneratePixelBlender("Lighten");
        GeneratePixelBlender("Overlay");
        GeneratePixelBlender("HardLight");
                             
        GeneratePixelBlender("Src");
        GeneratePixelBlender("Atop");
        GeneratePixelBlender("Over");
        GeneratePixelBlender("In");
        GeneratePixelBlender("Out");
        GeneratePixelBlender("Dest");
        GeneratePixelBlender("DestAtop");
        GeneratePixelBlender("DestOver");
        GeneratePixelBlender("DestIn");
        GeneratePixelBlender("DestOut");
        GeneratePixelBlender("Clear");
        GeneratePixelBlender("Xor");


#>
    }
}