### YamlMime:ManagedReference
items:
- uid: ImageSharp.Processors.ColorMatrixFilter`2
  commentId: T:ImageSharp.Processors.ColorMatrixFilter`2
  id: ColorMatrixFilter`2
  parent: ImageSharp.Processors
  children:
  - ImageSharp.Processors.ColorMatrixFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  - ImageSharp.Processors.ColorMatrixFilter`2.Compand
  - ImageSharp.Processors.ColorMatrixFilter`2.Matrix
  langs:
  - csharp
  - vb
  name: ColorMatrixFilter<TColor, TPacked>
  nameWithType: ColorMatrixFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.ColorMatrixFilter<TColor, TPacked>
  type: Class
  source:
    id: ColorMatrixFilter
    path: ''
    startLine: 6645
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp.Processors
  summary: "\nThe color matrix filter. Inherit from this class to perform operation involving color matrices.\n"
  example: []
  syntax:
    content: 'public abstract class ColorMatrixFilter<TColor, TPacked> : ImageFilter<TColor, TPacked>, IColorMatrixFilter<TColor, TPacked>, IImageFilter<TColor, TPacked>, IImageProcessor where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      Public MustInherit Class ColorMatrixFilter(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)
          Inherits ImageFilter(Of TColor, TPacked)
          Implements IColorMatrixFilter(Of TColor, TPacked), IImageFilter(Of TColor, TPacked), IImageProcessor
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
  inheritance:
  - System.Object
  - ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}
  - ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}
  implements:
  - ImageSharp.Processors.IColorMatrixFilter{{TColor},{TPacked}}
  - ImageSharp.Processors.IImageFilter{{TColor},{TPacked}}
  - ImageSharp.Processors.IImageProcessor
  inheritedMembers:
  - ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.Apply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle)
  - ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.Apply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle,System.Int32,System.Int32)
  - ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.OnApply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle)
  - ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.AfterApply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle)
  - ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}.ParallelOptions
  - ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}.Compand
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ColorMatrixFilter(Of TColor, TPacked)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: ImageSharp.Processors.ColorMatrixFilter(Of TColor, TPacked)
  name.vb: ColorMatrixFilter(Of TColor, TPacked)
- uid: ImageSharp.Processors.ColorMatrixFilter`2.Matrix
  commentId: P:ImageSharp.Processors.ColorMatrixFilter`2.Matrix
  id: Matrix
  parent: ImageSharp.Processors.ColorMatrixFilter`2
  langs:
  - csharp
  - vb
  name: Matrix
  nameWithType: ColorMatrixFilter<TColor, TPacked>.Matrix
  fullName: ImageSharp.Processors.ColorMatrixFilter<TColor, TPacked>.Matrix
  type: Property
  source:
    id: Matrix
    path: ''
    startLine: 6650
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp.Processors
  example: []
  syntax:
    content: public abstract Matrix4x4 Matrix { get; }
    content.vb: Public MustOverride ReadOnly Property Matrix As Matrix4x4
    parameters: []
    return:
      type: Matrix4x4
  implements:
  - ImageSharp.Processors.IColorMatrixFilter{{TColor},{TPacked}}.Matrix
  nameWithType.vb: ColorMatrixFilter(Of TColor, TPacked).Matrix
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: ImageSharp.Processors.ColorMatrixFilter(Of TColor, TPacked).Matrix
- uid: ImageSharp.Processors.ColorMatrixFilter`2.Compand
  commentId: P:ImageSharp.Processors.ColorMatrixFilter`2.Compand
  id: Compand
  parent: ImageSharp.Processors.ColorMatrixFilter`2
  langs:
  - csharp
  - vb
  name: Compand
  nameWithType: ColorMatrixFilter<TColor, TPacked>.Compand
  fullName: ImageSharp.Processors.ColorMatrixFilter<TColor, TPacked>.Compand
  type: Property
  source:
    id: Compand
    path: ''
    startLine: 6653
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp.Processors
  example: []
  syntax:
    content: public override bool Compand { get; set; }
    content.vb: Public Overrides Property Compand As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}.Compand
  implements:
  - ImageSharp.Processors.IImageProcessor.Compand
  nameWithType.vb: ColorMatrixFilter(Of TColor, TPacked).Compand
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: ImageSharp.Processors.ColorMatrixFilter(Of TColor, TPacked).Compand
- uid: ImageSharp.Processors.ColorMatrixFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  commentId: M:ImageSharp.Processors.ColorMatrixFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  id: Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  parent: ImageSharp.Processors.ColorMatrixFilter`2
  langs:
  - csharp
  - vb
  name: Apply(ImageBase<TColor, TPacked>, Rectangle, Int32, Int32)
  nameWithType: ColorMatrixFilter<TColor, TPacked>.Apply(ImageBase<TColor, TPacked>, Rectangle, Int32, Int32)
  fullName: ImageSharp.Processors.ColorMatrixFilter<TColor, TPacked>.Apply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle, System.Int32, System.Int32)
  type: Method
  source:
    id: Apply
    path: ''
    startLine: 6656
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp.Processors
  example: []
  syntax:
    content: protected override void Apply(ImageBase<TColor, TPacked> source, Rectangle sourceRectangle, int startY, int endY)
    content.vb: Protected Overrides Sub Apply(source As ImageBase(Of TColor, TPacked), sourceRectangle As Rectangle, startY As Integer, endY As Integer)
    parameters:
    - id: source
      type: ImageSharp.ImageBase{{TColor},{TPacked}}
    - id: sourceRectangle
      type: ImageSharp.Rectangle
    - id: startY
      type: System.Int32
    - id: endY
      type: System.Int32
  overridden: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.Apply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle,System.Int32,System.Int32)
  nameWithType.vb: ColorMatrixFilter(Of TColor, TPacked).Apply(ImageBase(Of TColor, TPacked), Rectangle, Int32, Int32)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: ImageSharp.Processors.ColorMatrixFilter(Of TColor, TPacked).Apply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle, System.Int32, System.Int32)
  name.vb: Apply(ImageBase(Of TColor, TPacked), Rectangle, Int32, Int32)
references:
- uid: ImageSharp.Processors
  commentId: N:ImageSharp.Processors
  isExternal: false
  name: ImageSharp.Processors
  nameWithType: ImageSharp.Processors
  fullName: ImageSharp.Processors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}
  commentId: T:ImageSharp.Processors.ImageProcessor{`0,`1}
  parent: ImageSharp.Processors
  definition: ImageSharp.Processors.ImageProcessor`2
  name: ImageProcessor<TColor, TPacked>
  nameWithType: ImageProcessor<TColor, TPacked>
  fullName: ImageSharp.Processors.ImageProcessor<TColor, TPacked>
  nameWithType.vb: ImageProcessor(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.ImageProcessor(Of TColor, TPacked)
  name.vb: ImageProcessor(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageProcessor`2
    name: ImageProcessor
    nameWithType: ImageProcessor
    fullName: ImageSharp.Processors.ImageProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.ImageProcessor`2
    name: ImageProcessor
    nameWithType: ImageProcessor
    fullName: ImageSharp.Processors.ImageProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}
  commentId: T:ImageSharp.Processors.ImageFilter{`0,`1}
  parent: ImageSharp.Processors
  definition: ImageSharp.Processors.ImageFilter`2
  name: ImageFilter<TColor, TPacked>
  nameWithType: ImageFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>
  nameWithType.vb: ImageFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked)
  name.vb: ImageFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2
    name: ImageFilter
    nameWithType: ImageFilter
    fullName: ImageSharp.Processors.ImageFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2
    name: ImageFilter
    nameWithType: ImageFilter
    fullName: ImageSharp.Processors.ImageFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.IColorMatrixFilter{{TColor},{TPacked}}
  commentId: T:ImageSharp.Processors.IColorMatrixFilter{`0,`1}
  parent: ImageSharp.Processors
  definition: ImageSharp.Processors.IColorMatrixFilter`2
  name: IColorMatrixFilter<TColor, TPacked>
  nameWithType: IColorMatrixFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.IColorMatrixFilter<TColor, TPacked>
  nameWithType.vb: IColorMatrixFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.IColorMatrixFilter(Of TColor, TPacked)
  name.vb: IColorMatrixFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.IColorMatrixFilter`2
    name: IColorMatrixFilter
    nameWithType: IColorMatrixFilter
    fullName: ImageSharp.Processors.IColorMatrixFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.IColorMatrixFilter`2
    name: IColorMatrixFilter
    nameWithType: IColorMatrixFilter
    fullName: ImageSharp.Processors.IColorMatrixFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.IImageFilter{{TColor},{TPacked}}
  commentId: T:ImageSharp.Processors.IImageFilter{`0,`1}
  parent: ImageSharp.Processors
  definition: ImageSharp.Processors.IImageFilter`2
  name: IImageFilter<TColor, TPacked>
  nameWithType: IImageFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.IImageFilter<TColor, TPacked>
  nameWithType.vb: IImageFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.IImageFilter(Of TColor, TPacked)
  name.vb: IImageFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.IImageFilter`2
    name: IImageFilter
    nameWithType: IImageFilter
    fullName: ImageSharp.Processors.IImageFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.IImageFilter`2
    name: IImageFilter
    nameWithType: IImageFilter
    fullName: ImageSharp.Processors.IImageFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.IImageProcessor
  commentId: T:ImageSharp.Processors.IImageProcessor
  parent: ImageSharp.Processors
  isExternal: false
  name: IImageProcessor
  nameWithType: IImageProcessor
  fullName: ImageSharp.Processors.IImageProcessor
- uid: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.Apply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle)
  commentId: M:ImageSharp.Processors.ImageFilter{`0,`1}.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  parent: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}
  definition: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  name: Apply(ImageBase<TColor, TPacked>, Rectangle)
  nameWithType: ImageFilter<TColor, TPacked>.Apply(ImageBase<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).Apply(ImageBase(Of TColor, TPacked), Rectangle)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Apply(ImageBase(Of TColor, TPacked), Rectangle)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: Apply
    nameWithType: ImageFilter<TColor, TPacked>.Apply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: Apply
    nameWithType: ImageFilter(Of TColor, TPacked).Apply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.Apply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle,System.Int32,System.Int32)
  commentId: M:ImageSharp.Processors.ImageFilter{`0,`1}.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  parent: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}
  definition: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  name: Apply(ImageBase<TColor, TPacked>, Rectangle, Int32, Int32)
  nameWithType: ImageFilter<TColor, TPacked>.Apply(ImageBase<TColor, TPacked>, Rectangle, Int32, Int32)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle, System.Int32, System.Int32)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).Apply(ImageBase(Of TColor, TPacked), Rectangle, Int32, Int32)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle, System.Int32, System.Int32)
  name.vb: Apply(ImageBase(Of TColor, TPacked), Rectangle, Int32, Int32)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
    name: Apply
    nameWithType: ImageFilter<TColor, TPacked>.Apply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
    name: Apply
    nameWithType: ImageFilter(Of TColor, TPacked).Apply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.OnApply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle)
  commentId: M:ImageSharp.Processors.ImageFilter{`0,`1}.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  parent: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}
  definition: ImageSharp.Processors.ImageFilter`2.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  name: OnApply(ImageBase<TColor, TPacked>, Rectangle)
  nameWithType: ImageFilter<TColor, TPacked>.OnApply(ImageBase<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.OnApply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).OnApply(ImageBase(Of TColor, TPacked), Rectangle)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).OnApply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: OnApply(ImageBase(Of TColor, TPacked), Rectangle)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: OnApply
    nameWithType: ImageFilter<TColor, TPacked>.OnApply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.OnApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: OnApply
    nameWithType: ImageFilter(Of TColor, TPacked).OnApply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).OnApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}.AfterApply(ImageSharp.ImageBase{{TColor},{TPacked}},ImageSharp.Rectangle)
  commentId: M:ImageSharp.Processors.ImageFilter{`0,`1}.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  parent: ImageSharp.Processors.ImageFilter{{TColor},{TPacked}}
  definition: ImageSharp.Processors.ImageFilter`2.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  name: AfterApply(ImageBase<TColor, TPacked>, Rectangle)
  nameWithType: ImageFilter<TColor, TPacked>.AfterApply(ImageBase<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.AfterApply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).AfterApply(ImageBase(Of TColor, TPacked), Rectangle)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).AfterApply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: AfterApply(ImageBase(Of TColor, TPacked), Rectangle)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: AfterApply
    nameWithType: ImageFilter<TColor, TPacked>.AfterApply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.AfterApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: AfterApply
    nameWithType: ImageFilter(Of TColor, TPacked).AfterApply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).AfterApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}.ParallelOptions
  commentId: P:ImageSharp.Processors.ImageProcessor{`0,`1}.ParallelOptions
  parent: ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}
  definition: ImageSharp.Processors.ImageProcessor`2.ParallelOptions
  name: ParallelOptions
  nameWithType: ImageProcessor<TColor, TPacked>.ParallelOptions
  fullName: ImageSharp.Processors.ImageProcessor<TColor, TPacked>.ParallelOptions
  nameWithType.vb: ImageProcessor(Of TColor, TPacked).ParallelOptions
  fullname.vb: ImageSharp.Processors.ImageProcessor(Of TColor, TPacked).ParallelOptions
- uid: ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}.Compand
  commentId: P:ImageSharp.Processors.ImageProcessor{`0,`1}.Compand
  parent: ImageSharp.Processors.ImageProcessor{{TColor},{TPacked}}
  definition: ImageSharp.Processors.ImageProcessor`2.Compand
  name: Compand
  nameWithType: ImageProcessor<TColor, TPacked>.Compand
  fullName: ImageSharp.Processors.ImageProcessor<TColor, TPacked>.Compand
  nameWithType.vb: ImageProcessor(Of TColor, TPacked).Compand
  fullname.vb: ImageSharp.Processors.ImageProcessor(Of TColor, TPacked).Compand
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: ImageSharp.Processors.ImageProcessor`2
  commentId: T:ImageSharp.Processors.ImageProcessor`2
  isExternal: false
  name: ImageProcessor<TColor, TPacked>
  nameWithType: ImageProcessor<TColor, TPacked>
  fullName: ImageSharp.Processors.ImageProcessor<TColor, TPacked>
  nameWithType.vb: ImageProcessor(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.ImageProcessor(Of TColor, TPacked)
  name.vb: ImageProcessor(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageProcessor`2
    name: ImageProcessor
    nameWithType: ImageProcessor
    fullName: ImageSharp.Processors.ImageProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.ImageProcessor`2
    name: ImageProcessor
    nameWithType: ImageProcessor
    fullName: ImageSharp.Processors.ImageProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter`2
  commentId: T:ImageSharp.Processors.ImageFilter`2
  isExternal: false
  name: ImageFilter<TColor, TPacked>
  nameWithType: ImageFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>
  nameWithType.vb: ImageFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked)
  name.vb: ImageFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2
    name: ImageFilter
    nameWithType: ImageFilter
    fullName: ImageSharp.Processors.ImageFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2
    name: ImageFilter
    nameWithType: ImageFilter
    fullName: ImageSharp.Processors.ImageFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.IColorMatrixFilter`2
  commentId: T:ImageSharp.Processors.IColorMatrixFilter`2
  isExternal: false
  name: IColorMatrixFilter<TColor, TPacked>
  nameWithType: IColorMatrixFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.IColorMatrixFilter<TColor, TPacked>
  nameWithType.vb: IColorMatrixFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.IColorMatrixFilter(Of TColor, TPacked)
  name.vb: IColorMatrixFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.IColorMatrixFilter`2
    name: IColorMatrixFilter
    nameWithType: IColorMatrixFilter
    fullName: ImageSharp.Processors.IColorMatrixFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.IColorMatrixFilter`2
    name: IColorMatrixFilter
    nameWithType: IColorMatrixFilter
    fullName: ImageSharp.Processors.IColorMatrixFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.IImageFilter`2
  commentId: T:ImageSharp.Processors.IImageFilter`2
  isExternal: false
  name: IImageFilter<TColor, TPacked>
  nameWithType: IImageFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.IImageFilter<TColor, TPacked>
  nameWithType.vb: IImageFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.IImageFilter(Of TColor, TPacked)
  name.vb: IImageFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.IImageFilter`2
    name: IImageFilter
    nameWithType: IImageFilter
    fullName: ImageSharp.Processors.IImageFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.IImageFilter`2
    name: IImageFilter
    nameWithType: IImageFilter
    fullName: ImageSharp.Processors.IImageFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  isExternal: false
  name: Apply(ImageBase<TColor, TPacked>, Rectangle)
  nameWithType: ImageFilter<TColor, TPacked>.Apply(ImageBase<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).Apply(ImageBase(Of TColor, TPacked), Rectangle)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Apply(ImageBase(Of TColor, TPacked), Rectangle)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: Apply
    nameWithType: ImageFilter<TColor, TPacked>.Apply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: Apply
    nameWithType: ImageFilter(Of TColor, TPacked).Apply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  commentId: M:ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
  isExternal: true
  name: Apply(ImageBase<TColor, TPacked>, Rectangle, Int32, Int32)
  nameWithType: ImageFilter<TColor, TPacked>.Apply(ImageBase<TColor, TPacked>, Rectangle, Int32, Int32)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle, System.Int32, System.Int32)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).Apply(ImageBase(Of TColor, TPacked), Rectangle, Int32, Int32)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle, System.Int32, System.Int32)
  name.vb: Apply(ImageBase(Of TColor, TPacked), Rectangle, Int32, Int32)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
    name: Apply
    nameWithType: ImageFilter<TColor, TPacked>.Apply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.Apply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle,System.Int32,System.Int32)
    name: Apply
    nameWithType: ImageFilter(Of TColor, TPacked).Apply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter`2.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.Processors.ImageFilter`2.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  isExternal: false
  name: OnApply(ImageBase<TColor, TPacked>, Rectangle)
  nameWithType: ImageFilter<TColor, TPacked>.OnApply(ImageBase<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.OnApply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).OnApply(ImageBase(Of TColor, TPacked), Rectangle)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).OnApply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: OnApply(ImageBase(Of TColor, TPacked), Rectangle)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: OnApply
    nameWithType: ImageFilter<TColor, TPacked>.OnApply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.OnApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.OnApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: OnApply
    nameWithType: ImageFilter(Of TColor, TPacked).OnApply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).OnApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageFilter`2.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.Processors.ImageFilter`2.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
  isExternal: false
  name: AfterApply(ImageBase<TColor, TPacked>, Rectangle)
  nameWithType: ImageFilter<TColor, TPacked>.AfterApply(ImageBase<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.AfterApply(ImageSharp.ImageBase<TColor, TPacked>, ImageSharp.Rectangle)
  nameWithType.vb: ImageFilter(Of TColor, TPacked).AfterApply(ImageBase(Of TColor, TPacked), Rectangle)
  fullname.vb: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).AfterApply(ImageSharp.ImageBase(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: AfterApply(ImageBase(Of TColor, TPacked), Rectangle)
  spec.csharp:
  - uid: ImageSharp.Processors.ImageFilter`2.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: AfterApply
    nameWithType: ImageFilter<TColor, TPacked>.AfterApply
    fullName: ImageSharp.Processors.ImageFilter<TColor, TPacked>.AfterApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ImageSharp.Processors.ImageFilter`2.AfterApply(ImageSharp.ImageBase{`0,`1},ImageSharp.Rectangle)
    name: AfterApply
    nameWithType: ImageFilter(Of TColor, TPacked).AfterApply
    fullName: ImageSharp.Processors.ImageFilter(Of TColor, TPacked).AfterApply
  - name: (
    nameWithType: (
    fullName: (
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ImageSharp.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: ImageSharp.Rectangle
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.ImageProcessor`2.ParallelOptions
  commentId: P:ImageSharp.Processors.ImageProcessor`2.ParallelOptions
  isExternal: false
  name: ParallelOptions
  nameWithType: ImageProcessor<TColor, TPacked>.ParallelOptions
  fullName: ImageSharp.Processors.ImageProcessor<TColor, TPacked>.ParallelOptions
  nameWithType.vb: ImageProcessor(Of TColor, TPacked).ParallelOptions
  fullname.vb: ImageSharp.Processors.ImageProcessor(Of TColor, TPacked).ParallelOptions
- uid: ImageSharp.Processors.ImageProcessor`2.Compand
  commentId: P:ImageSharp.Processors.ImageProcessor`2.Compand
  isExternal: false
  name: Compand
  nameWithType: ImageProcessor<TColor, TPacked>.Compand
  fullName: ImageSharp.Processors.ImageProcessor<TColor, TPacked>.Compand
  nameWithType.vb: ImageProcessor(Of TColor, TPacked).Compand
  fullname.vb: ImageSharp.Processors.ImageProcessor(Of TColor, TPacked).Compand
- uid: ImageSharp.Processors.IColorMatrixFilter{{TColor},{TPacked}}.Matrix
  commentId: P:ImageSharp.Processors.IColorMatrixFilter{`0,`1}.Matrix
  parent: ImageSharp.Processors.IColorMatrixFilter{{TColor},{TPacked}}
  definition: ImageSharp.Processors.IColorMatrixFilter`2.Matrix
  name: Matrix
  nameWithType: IColorMatrixFilter<TColor, TPacked>.Matrix
  fullName: ImageSharp.Processors.IColorMatrixFilter<TColor, TPacked>.Matrix
  nameWithType.vb: IColorMatrixFilter(Of TColor, TPacked).Matrix
  fullname.vb: ImageSharp.Processors.IColorMatrixFilter(Of TColor, TPacked).Matrix
- uid: Matrix4x4
  isExternal: true
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Matrix4x4
- uid: ImageSharp.Processors.IColorMatrixFilter`2.Matrix
  commentId: P:ImageSharp.Processors.IColorMatrixFilter`2.Matrix
  isExternal: false
  name: Matrix
  nameWithType: IColorMatrixFilter<TColor, TPacked>.Matrix
  fullName: ImageSharp.Processors.IColorMatrixFilter<TColor, TPacked>.Matrix
  nameWithType.vb: IColorMatrixFilter(Of TColor, TPacked).Matrix
  fullname.vb: ImageSharp.Processors.IColorMatrixFilter(Of TColor, TPacked).Matrix
- uid: ImageSharp.Processors.IImageProcessor.Compand
  commentId: P:ImageSharp.Processors.IImageProcessor.Compand
  parent: ImageSharp.Processors.IImageProcessor
  isExternal: false
  name: Compand
  nameWithType: IImageProcessor.Compand
  fullName: ImageSharp.Processors.IImageProcessor.Compand
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ImageSharp.ImageBase{{TColor},{TPacked}}
  commentId: T:ImageSharp.ImageBase{``0,``1}
  parent: ImageSharp
  definition: ImageSharp.ImageBase`2
  name: ImageBase<TColor, TPacked>
  nameWithType: ImageBase<TColor, TPacked>
  fullName: ImageSharp.ImageBase<TColor, TPacked>
  nameWithType.vb: ImageBase(Of TColor, TPacked)
  fullname.vb: ImageSharp.ImageBase(Of TColor, TPacked)
  name.vb: ImageBase(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Rectangle
  commentId: T:ImageSharp.Rectangle
  parent: ImageSharp
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: ImageSharp.Rectangle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ImageSharp.ImageBase`2
  commentId: T:ImageSharp.ImageBase`2
  parent: ImageSharp
  isExternal: false
  name: ImageBase<TColor, TPacked>
  nameWithType: ImageBase<TColor, TPacked>
  fullName: ImageSharp.ImageBase<TColor, TPacked>
  nameWithType.vb: ImageBase(Of TColor, TPacked)
  fullname.vb: ImageSharp.ImageBase(Of TColor, TPacked)
  name.vb: ImageBase(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp
  commentId: N:ImageSharp
  isExternal: false
  name: ImageSharp
  nameWithType: ImageSharp
  fullName: ImageSharp
