### YamlMime:ManagedReference
items:
- uid: ImageSharp.ImageExtensions
  commentId: T:ImageSharp.ImageExtensions
  id: ImageExtensions
  parent: ImageSharp
  children:
  - ImageSharp.ImageExtensions.Alpha``2(ImageSharp.Image{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.Alpha``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.AutoOrient``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.BackgroundColor``2(ImageSharp.Image{``0,``1},``0)
  - ImageSharp.ImageExtensions.BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single)
  - ImageSharp.ImageExtensions.BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.BlackWhite``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.BlackWhite``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Brightness``2(ImageSharp.Image{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.Brightness``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness)
  - ImageSharp.ImageExtensions.ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Contrast``2(ImageSharp.Image{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.Contrast``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  - ImageSharp.ImageExtensions.Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,ImageSharp.Rectangle,System.Boolean)
  - ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,System.Boolean)
  - ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  - ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  - ImageSharp.ImageExtensions.EntropyCrop``2(ImageSharp.Image{``0,``1},System.Single)
  - ImageSharp.ImageExtensions.Flip``2(ImageSharp.Image{``0,``1},ImageSharp.FlipType)
  - ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},``0)
  - ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},``0,System.Single,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},System.Single)
  - ImageSharp.ImageExtensions.Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.GrayscaleMode)
  - ImageSharp.ImageExtensions.Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.GrayscaleMode)
  - ImageSharp.ImageExtensions.GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single)
  - ImageSharp.ImageExtensions.GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single)
  - ImageSharp.ImageExtensions.GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Hue``2(ImageSharp.Image{``0,``1},System.Single)
  - ImageSharp.ImageExtensions.Hue``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Invert``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.Invert``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Kodachrome``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.Kodachrome``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Lomograph``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.Lomograph``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  - ImageSharp.ImageExtensions.OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Pad``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  - ImageSharp.ImageExtensions.Pixelate``2(ImageSharp.Image{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.Pixelate``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Polaroid``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.Polaroid``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantization,System.Int32)
  - ImageSharp.ImageExtensions.Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantizers.IQuantizer{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},ImageSharp.ResizeOptions)
  - ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  - ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler)
  - ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,ImageSharp.Rectangle,ImageSharp.Rectangle,System.Boolean)
  - ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,System.Boolean)
  - ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,System.Boolean)
  - ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType)
  - ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},System.Single)
  - ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},System.Single,System.Boolean)
  - ImageSharp.ImageExtensions.RotateFlip``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType,ImageSharp.FlipType)
  - ImageSharp.ImageExtensions.Saturation``2(ImageSharp.Image{``0,``1},System.Int32)
  - ImageSharp.ImageExtensions.Saturation``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.SaveAsBmp``2(ImageSharp.Image{``0,``1},System.IO.Stream)
  - ImageSharp.ImageExtensions.SaveAsGif``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  - ImageSharp.ImageExtensions.SaveAsJpeg``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  - ImageSharp.ImageExtensions.SaveAsPng``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  - ImageSharp.ImageExtensions.Sepia``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.Sepia``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  - ImageSharp.ImageExtensions.Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single,System.Boolean)
  - ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1})
  - ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},``0)
  - ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},``0,System.Single,System.Single,ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  - ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  langs:
  - csharp
  - vb
  name: ImageExtensions
  nameWithType: ImageExtensions
  fullName: ImageSharp.ImageExtensions
  type: Class
  source:
    id: ImageExtensions
    path: ''
    startLine: 29167
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nExtension methods for the <xref href=\"ImageSharp.Image\" data-throw-if-not-resolved=\"false\"></xref> type.\n"
  example: []
  syntax:
    content: public static class ImageExtensions
    content.vb: Public Module ImageExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: ImageSharp.ImageExtensions.Alpha``2(ImageSharp.Image{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Alpha``2(ImageSharp.Image{``0,``1},System.Int32)
  id: Alpha``2(ImageSharp.Image{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Alpha<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.Alpha<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.Alpha<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: Alpha
    path: ''
    startLine: 4524
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the alpha component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Alpha<TColor, TPacked>(this Image<TColor, TPacked> source, int percent)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Alpha(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), percent As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: percent
      type: System.Int32
      description: The new opacity of the image. Must be between 0 and 100.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Alpha(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Alpha(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32)
  name.vb: Alpha(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.Alpha``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Alpha``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  id: Alpha``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Alpha<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  nameWithType: ImageExtensions.Alpha<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.Alpha<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: Alpha
    path: ''
    startLine: 4542
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the alpha component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Alpha<TColor, TPacked>(this Image<TColor, TPacked> source, int percent, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Alpha(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), percent As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: percent
      type: System.Int32
      description: The new opacity of the image. Must be between 0 and 100.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Alpha(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Alpha(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, ImageSharp.Rectangle)
  name.vb: Alpha(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.BackgroundColor``2(ImageSharp.Image{``0,``1},``0)
  commentId: M:ImageSharp.ImageExtensions.BackgroundColor``2(ImageSharp.Image{``0,``1},``0)
  id: BackgroundColor``2(ImageSharp.Image{``0,``1},``0)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: BackgroundColor<TColor, TPacked>(Image<TColor, TPacked>, TColor)
  nameWithType: ImageExtensions.BackgroundColor<TColor, TPacked>(Image<TColor, TPacked>, TColor)
  fullName: ImageSharp.ImageExtensions.BackgroundColor<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, TColor)
  type: Method
  source:
    id: BackgroundColor
    path: ''
    startLine: 4573
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nReplaces the background color of image with the given one.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> BackgroundColor<TColor, TPacked>(this Image<TColor, TPacked> source, TColor color)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BackgroundColor(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), color As TColor) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: color
      type: '{TColor}'
      description: The color to set as the background.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.BackgroundColor(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.BackgroundColor(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), TColor)
  name.vb: BackgroundColor(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor)
- uid: ImageSharp.ImageExtensions.BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single)
  commentId: M:ImageSharp.ImageExtensions.BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single)
  id: BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: BinaryThreshold<TColor, TPacked>(Image<TColor, TPacked>, Single)
  nameWithType: ImageExtensions.BinaryThreshold<TColor, TPacked>(Image<TColor, TPacked>, Single)
  fullName: ImageSharp.ImageExtensions.BinaryThreshold<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single)
  type: Method
  source:
    id: BinaryThreshold
    path: ''
    startLine: 4604
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies binerization to the image splitting the pixels at the given threshold.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> BinaryThreshold<TColor, TPacked>(this Image<TColor, TPacked> source, float threshold)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BinaryThreshold(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), threshold As Single) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: threshold
      type: System.Single
      description: The threshold to apply binerization of the image. Must be between 0 and 1.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.BinaryThreshold(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.BinaryThreshold(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single)
  name.vb: BinaryThreshold(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
- uid: ImageSharp.ImageExtensions.BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  id: BinaryThreshold``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: BinaryThreshold<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  nameWithType: ImageExtensions.BinaryThreshold<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  fullName: ImageSharp.ImageExtensions.BinaryThreshold<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, ImageSharp.Rectangle)
  type: Method
  source:
    id: BinaryThreshold
    path: ''
    startLine: 4622
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies binerization to the image splitting the pixels at the given threshold.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> BinaryThreshold<TColor, TPacked>(this Image<TColor, TPacked> source, float threshold, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BinaryThreshold(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), threshold As Single, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: threshold
      type: System.Single
      description: The threshold to apply binerization of the image. Must be between 0 and 1.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.BinaryThreshold(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.BinaryThreshold(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, ImageSharp.Rectangle)
  name.vb: BinaryThreshold(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
- uid: ImageSharp.ImageExtensions.BlackWhite``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.BlackWhite``2(ImageSharp.Image{``0,``1})
  id: BlackWhite``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: BlackWhite<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.BlackWhite<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.BlackWhite<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: BlackWhite
    path: ''
    startLine: 4652
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies black and white toning to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> BlackWhite<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BlackWhite(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.BlackWhite(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.BlackWhite(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: BlackWhite(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.BlackWhite``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.BlackWhite``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: BlackWhite``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: BlackWhite<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.BlackWhite<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.BlackWhite<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: BlackWhite
    path: ''
    startLine: 4669
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies black and white toning to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> BlackWhite<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BlackWhite(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.BlackWhite(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.BlackWhite(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: BlackWhite(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32)
  id: Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Blend<TColor, TPacked>(Image<TColor, TPacked>, ImageBase<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.Blend<TColor, TPacked>(Image<TColor, TPacked>, ImageBase<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.Blend<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.ImageBase<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: Blend
    path: ''
    startLine: 4701
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nCombines the given image together with the current one by blending their pixels.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Blend<TColor, TPacked>(this Image<TColor, TPacked> source, ImageBase<TColor, TPacked> image, int percent = 50)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Blend(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), image As ImageBase(Of TColor, TPacked), percent As Integer = 50) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: image
      type: ImageSharp.ImageBase{{TColor},{TPacked}}
      description: The image to blend with the currently processing image.
    - id: percent
      type: System.Int32
      description: The opacity of the image image to blend. Must be between 0 and 100.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Blend(Of TColor, TPacked)(Image(Of TColor, TPacked), ImageBase(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Blend(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.ImageBase(Of TColor, TPacked), System.Int32)
  name.vb: Blend(Of TColor, TPacked)(Image(Of TColor, TPacked), ImageBase(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32,ImageSharp.Rectangle)
  id: Blend``2(ImageSharp.Image{``0,``1},ImageSharp.ImageBase{``0,``1},System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Blend<TColor, TPacked>(Image<TColor, TPacked>, ImageBase<TColor, TPacked>, Int32, Rectangle)
  nameWithType: ImageExtensions.Blend<TColor, TPacked>(Image<TColor, TPacked>, ImageBase<TColor, TPacked>, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.Blend<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.ImageBase<TColor, TPacked>, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: Blend
    path: ''
    startLine: 4720
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nCombines the given image together with the current one by blending their pixels.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Blend<TColor, TPacked>(this Image<TColor, TPacked> source, ImageBase<TColor, TPacked> image, int percent, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Blend(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), image As ImageBase(Of TColor, TPacked), percent As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: image
      type: ImageSharp.ImageBase{{TColor},{TPacked}}
      description: The image to blend with the currently processing image.
    - id: percent
      type: System.Int32
      description: The opacity of the image image to blend. Must be between 0 and 100.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Blend(Of TColor, TPacked)(Image(Of TColor, TPacked), ImageBase(Of TColor, TPacked), Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Blend(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.ImageBase(Of TColor, TPacked), System.Int32, ImageSharp.Rectangle)
  name.vb: Blend(Of TColor, TPacked)(Image(Of TColor, TPacked), ImageBase(Of TColor, TPacked), Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.Brightness``2(ImageSharp.Image{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Brightness``2(ImageSharp.Image{``0,``1},System.Int32)
  id: Brightness``2(ImageSharp.Image{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Brightness<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.Brightness<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.Brightness<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: Brightness
    path: ''
    startLine: 4750
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the brightness component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Brightness<TColor, TPacked>(this Image<TColor, TPacked> source, int amount)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Brightness(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), amount As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: amount
      type: System.Int32
      description: The new brightness of the image. Must be between -100 and 100.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Brightness(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Brightness(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32)
  name.vb: Brightness(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.Brightness``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Brightness``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  id: Brightness``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Brightness<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  nameWithType: ImageExtensions.Brightness<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.Brightness<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: Brightness
    path: ''
    startLine: 4768
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the brightness component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Brightness<TColor, TPacked>(this Image<TColor, TPacked> source, int amount, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Brightness(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), amount As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: amount
      type: System.Int32
      description: The new brightness of the image. Must be between -100 and 100.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Brightness(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Brightness(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, ImageSharp.Rectangle)
  name.vb: Brightness(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness)
  commentId: M:ImageSharp.ImageExtensions.ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness)
  id: ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: ColorBlindness<TColor, TPacked>(Image<TColor, TPacked>, ColorBlindness)
  nameWithType: ImageExtensions.ColorBlindness<TColor, TPacked>(Image<TColor, TPacked>, ColorBlindness)
  fullName: ImageSharp.ImageExtensions.ColorBlindness<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.ColorBlindness)
  type: Method
  source:
    id: ColorBlindness
    path: ''
    startLine: 4799
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies the given colorblindness simulator to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> ColorBlindness<TColor, TPacked>(this Image<TColor, TPacked> source, ColorBlindness colorBlindness)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ColorBlindness(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), colorBlindness As ColorBlindness) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: colorBlindness
      type: ImageSharp.ColorBlindness
      description: The type of color blindness simulator to apply.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.ColorBlindness(Of TColor, TPacked)(Image(Of TColor, TPacked), ColorBlindness)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.ColorBlindness(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.ColorBlindness)
  name.vb: ColorBlindness(Of TColor, TPacked)(Image(Of TColor, TPacked), ColorBlindness)
- uid: ImageSharp.ImageExtensions.ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness,ImageSharp.Rectangle)
  id: ColorBlindness``2(ImageSharp.Image{``0,``1},ImageSharp.ColorBlindness,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: ColorBlindness<TColor, TPacked>(Image<TColor, TPacked>, ColorBlindness, Rectangle)
  nameWithType: ImageExtensions.ColorBlindness<TColor, TPacked>(Image<TColor, TPacked>, ColorBlindness, Rectangle)
  fullName: ImageSharp.ImageExtensions.ColorBlindness<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.ColorBlindness, ImageSharp.Rectangle)
  type: Method
  source:
    id: ColorBlindness
    path: ''
    startLine: 4817
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies the given colorblindness simulator to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> ColorBlindness<TColor, TPacked>(this Image<TColor, TPacked> source, ColorBlindness colorBlindness, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ColorBlindness(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), colorBlindness As ColorBlindness, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: colorBlindness
      type: ImageSharp.ColorBlindness
      description: The type of color blindness simulator to apply.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.ColorBlindness(Of TColor, TPacked)(Image(Of TColor, TPacked), ColorBlindness, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.ColorBlindness(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.ColorBlindness, ImageSharp.Rectangle)
  name.vb: ColorBlindness(Of TColor, TPacked)(Image(Of TColor, TPacked), ColorBlindness, Rectangle)
- uid: ImageSharp.ImageExtensions.Contrast``2(ImageSharp.Image{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Contrast``2(ImageSharp.Image{``0,``1},System.Int32)
  id: Contrast``2(ImageSharp.Image{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Contrast<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.Contrast<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.Contrast<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: Contrast
    path: ''
    startLine: 4885
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the contrast component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Contrast<TColor, TPacked>(this Image<TColor, TPacked> source, int amount)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contrast(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), amount As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: amount
      type: System.Int32
      description: The new contrast of the image. Must be between -100 and 100.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Contrast(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Contrast(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32)
  name.vb: Contrast(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.Contrast``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Contrast``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  id: Contrast``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Contrast<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  nameWithType: ImageExtensions.Contrast<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.Contrast<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: Contrast
    path: ''
    startLine: 4903
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the contrast component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Contrast<TColor, TPacked>(this Image<TColor, TPacked> source, int amount, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contrast(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), amount As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: amount
      type: System.Int32
      description: The new contrast of the image. Must be between -100 and 100.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Contrast(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Contrast(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, ImageSharp.Rectangle)
  name.vb: Contrast(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1})
  id: Glow``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Glow<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.Glow<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.Glow<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: Glow
    path: ''
    startLine: 4933
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial glow effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Glow<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Glow(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Glow(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Glow(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: Glow(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},``0)
  commentId: M:ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},``0)
  id: Glow``2(ImageSharp.Image{``0,``1},``0)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Glow<TColor, TPacked>(Image<TColor, TPacked>, TColor)
  nameWithType: ImageExtensions.Glow<TColor, TPacked>(Image<TColor, TPacked>, TColor)
  fullName: ImageSharp.ImageExtensions.Glow<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, TColor)
  type: Method
  source:
    id: Glow
    path: ''
    startLine: 4948
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial glow effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Glow<TColor, TPacked>(this Image<TColor, TPacked> source, TColor color)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Glow(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), color As TColor) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: color
      type: '{TColor}'
      description: The color to set as the glow.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Glow(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), TColor)
  name.vb: Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor)
- uid: ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},System.Single)
  commentId: M:ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},System.Single)
  id: Glow``2(ImageSharp.Image{``0,``1},System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Glow<TColor, TPacked>(Image<TColor, TPacked>, Single)
  nameWithType: ImageExtensions.Glow<TColor, TPacked>(Image<TColor, TPacked>, Single)
  fullName: ImageSharp.ImageExtensions.Glow<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single)
  type: Method
  source:
    id: Glow
    path: ''
    startLine: 4963
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial glow effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Glow<TColor, TPacked>(this Image<TColor, TPacked> source, float radius)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Glow(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), radius As Single) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: radius
      type: System.Single
      description: The the radius.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Glow(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single)
  name.vb: Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
- uid: ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: Glow``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Glow<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.Glow<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.Glow<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: Glow
    path: ''
    startLine: 4980
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial glow effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Glow<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Glow(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Glow(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},``0,System.Single,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Glow``2(ImageSharp.Image{``0,``1},``0,System.Single,ImageSharp.Rectangle)
  id: Glow``2(ImageSharp.Image{``0,``1},``0,System.Single,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Glow<TColor, TPacked>(Image<TColor, TPacked>, TColor, Single, Rectangle)
  nameWithType: ImageExtensions.Glow<TColor, TPacked>(Image<TColor, TPacked>, TColor, Single, Rectangle)
  fullName: ImageSharp.ImageExtensions.Glow<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, TColor, System.Single, ImageSharp.Rectangle)
  type: Method
  source:
    id: Glow
    path: ''
    startLine: 4999
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial glow effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Glow<TColor, TPacked>(this Image<TColor, TPacked> source, TColor color, float radius, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Glow(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), color As TColor, radius As Single, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: color
      type: '{TColor}'
      description: The color to set as the glow.
    - id: radius
      type: System.Single
      description: The the radius.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor, Single, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Glow(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), TColor, System.Single, ImageSharp.Rectangle)
  name.vb: Glow(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor, Single, Rectangle)
- uid: ImageSharp.ImageExtensions.Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.GrayscaleMode)
  commentId: M:ImageSharp.ImageExtensions.Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.GrayscaleMode)
  id: Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.GrayscaleMode)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Grayscale<TColor, TPacked>(Image<TColor, TPacked>, GrayscaleMode)
  nameWithType: ImageExtensions.Grayscale<TColor, TPacked>(Image<TColor, TPacked>, GrayscaleMode)
  fullName: ImageSharp.ImageExtensions.Grayscale<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.GrayscaleMode)
  type: Method
  source:
    id: Grayscale
    path: ''
    startLine: 5037
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies Grayscale toning to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Grayscale<TColor, TPacked>(this Image<TColor, TPacked> source, GrayscaleMode mode = GrayscaleMode.Bt709)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Grayscale(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), mode As GrayscaleMode = GrayscaleMode.Bt709) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: mode
      type: ImageSharp.GrayscaleMode
      description: The formula to apply to perform the operation.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Grayscale(Of TColor, TPacked)(Image(Of TColor, TPacked), GrayscaleMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Grayscale(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.GrayscaleMode)
  name.vb: Grayscale(Of TColor, TPacked)(Image(Of TColor, TPacked), GrayscaleMode)
- uid: ImageSharp.ImageExtensions.Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.GrayscaleMode)
  commentId: M:ImageSharp.ImageExtensions.Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.GrayscaleMode)
  id: Grayscale``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.GrayscaleMode)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Grayscale<TColor, TPacked>(Image<TColor, TPacked>, Rectangle, GrayscaleMode)
  nameWithType: ImageExtensions.Grayscale<TColor, TPacked>(Image<TColor, TPacked>, Rectangle, GrayscaleMode)
  fullName: ImageSharp.ImageExtensions.Grayscale<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle, ImageSharp.GrayscaleMode)
  type: Method
  source:
    id: Grayscale
    path: ''
    startLine: 5055
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies Grayscale toning to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Grayscale<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle, GrayscaleMode mode = GrayscaleMode.Bt709)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Grayscale(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle, mode As GrayscaleMode = GrayscaleMode.Bt709) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    - id: mode
      type: ImageSharp.GrayscaleMode
      description: The formula to apply to perform the operation.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Grayscale(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle, GrayscaleMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Grayscale(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle, ImageSharp.GrayscaleMode)
  name.vb: Grayscale(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle, GrayscaleMode)
- uid: ImageSharp.ImageExtensions.Hue``2(ImageSharp.Image{``0,``1},System.Single)
  commentId: M:ImageSharp.ImageExtensions.Hue``2(ImageSharp.Image{``0,``1},System.Single)
  id: Hue``2(ImageSharp.Image{``0,``1},System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Hue<TColor, TPacked>(Image<TColor, TPacked>, Single)
  nameWithType: ImageExtensions.Hue<TColor, TPacked>(Image<TColor, TPacked>, Single)
  fullName: ImageSharp.ImageExtensions.Hue<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single)
  type: Method
  source:
    id: Hue
    path: ''
    startLine: 5090
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the hue component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Hue<TColor, TPacked>(this Image<TColor, TPacked> source, float degrees)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Hue(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), degrees As Single) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: degrees
      type: System.Single
      description: The angle in degrees to adjust the image.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Hue(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Hue(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single)
  name.vb: Hue(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
- uid: ImageSharp.ImageExtensions.Hue``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Hue``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  id: Hue``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Hue<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  nameWithType: ImageExtensions.Hue<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  fullName: ImageSharp.ImageExtensions.Hue<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, ImageSharp.Rectangle)
  type: Method
  source:
    id: Hue
    path: ''
    startLine: 5108
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the hue component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Hue<TColor, TPacked>(this Image<TColor, TPacked> source, float degrees, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Hue(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), degrees As Single, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: degrees
      type: System.Single
      description: The angle in degrees to adjust the image.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Hue(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Hue(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, ImageSharp.Rectangle)
  name.vb: Hue(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
- uid: ImageSharp.ImageExtensions.Invert``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.Invert``2(ImageSharp.Image{``0,``1})
  id: Invert``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Invert<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.Invert<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.Invert<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: Invert
    path: ''
    startLine: 5138
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nInverts the colors of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Invert<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Invert(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Invert(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Invert(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: Invert(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.Invert``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Invert``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: Invert``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Invert<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.Invert<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.Invert<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: Invert
    path: ''
    startLine: 5155
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nInverts the colors of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Invert<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Invert(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Invert(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Invert(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Invert(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Kodachrome``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.Kodachrome``2(ImageSharp.Image{``0,``1})
  id: Kodachrome``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Kodachrome<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.Kodachrome<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.Kodachrome<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: Kodachrome
    path: ''
    startLine: 5185
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an old Kodachrome camera effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Kodachrome<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Kodachrome(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Kodachrome(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Kodachrome(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: Kodachrome(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.Kodachrome``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Kodachrome``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: Kodachrome``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Kodachrome<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.Kodachrome<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.Kodachrome<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: Kodachrome
    path: ''
    startLine: 5202
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an old Kodachrome camera effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Kodachrome<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Kodachrome(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Kodachrome(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Kodachrome(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Kodachrome(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Lomograph``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.Lomograph``2(ImageSharp.Image{``0,``1})
  id: Lomograph``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Lomograph<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.Lomograph<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.Lomograph<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: Lomograph
    path: ''
    startLine: 5232
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an old Lomograph camera effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Lomograph<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lomograph(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Lomograph(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Lomograph(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: Lomograph(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.Lomograph``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Lomograph``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: Lomograph``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Lomograph<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.Lomograph<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.Lomograph<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: Lomograph
    path: ''
    startLine: 5249
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an old Lomograph camera effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Lomograph<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lomograph(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Lomograph(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Lomograph(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Lomograph(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Polaroid``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.Polaroid``2(ImageSharp.Image{``0,``1})
  id: Polaroid``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Polaroid<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.Polaroid<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.Polaroid<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: Polaroid
    path: ''
    startLine: 5279
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an old Polaroid camera effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Polaroid<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Polaroid(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Polaroid(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Polaroid(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: Polaroid(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.Polaroid``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Polaroid``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: Polaroid``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Polaroid<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.Polaroid<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.Polaroid<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: Polaroid
    path: ''
    startLine: 5296
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an old Polaroid camera effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Polaroid<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Polaroid(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Polaroid(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Polaroid(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Polaroid(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Saturation``2(ImageSharp.Image{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Saturation``2(ImageSharp.Image{``0,``1},System.Int32)
  id: Saturation``2(ImageSharp.Image{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Saturation<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.Saturation<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.Saturation<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: Saturation
    path: ''
    startLine: 5327
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the saturation component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Saturation<TColor, TPacked>(this Image<TColor, TPacked> source, int amount)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Saturation(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), amount As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: amount
      type: System.Int32
      description: The new saturation of the image. Must be between -100 and 100.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Saturation(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Saturation(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32)
  name.vb: Saturation(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.Saturation``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Saturation``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  id: Saturation``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Saturation<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  nameWithType: ImageExtensions.Saturation<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.Saturation<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: Saturation
    path: ''
    startLine: 5345
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the saturation component of the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Saturation<TColor, TPacked>(this Image<TColor, TPacked> source, int amount, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Saturation(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), amount As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: amount
      type: System.Int32
      description: The new saturation of the image. Must be between -100 and 100.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Saturation(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Saturation(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, ImageSharp.Rectangle)
  name.vb: Saturation(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.Sepia``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.Sepia``2(ImageSharp.Image{``0,``1})
  id: Sepia``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Sepia<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.Sepia<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.Sepia<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: Sepia
    path: ''
    startLine: 5375
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies sepia toning to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Sepia<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sepia(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Sepia(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Sepia(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: Sepia(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.Sepia``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Sepia``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: Sepia``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Sepia<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.Sepia<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.Sepia<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: Sepia
    path: ''
    startLine: 5392
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies sepia toning to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Sepia<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sepia(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Sepia(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Sepia(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Sepia(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1})
  id: Vignette``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Vignette<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.Vignette<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.Vignette<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: Vignette
    path: ''
    startLine: 5421
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial vignette effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Vignette<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vignette(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Vignette(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},``0)
  commentId: M:ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},``0)
  id: Vignette``2(ImageSharp.Image{``0,``1},``0)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Vignette<TColor, TPacked>(Image<TColor, TPacked>, TColor)
  nameWithType: ImageExtensions.Vignette<TColor, TPacked>(Image<TColor, TPacked>, TColor)
  fullName: ImageSharp.ImageExtensions.Vignette<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, TColor)
  type: Method
  source:
    id: Vignette
    path: ''
    startLine: 5436
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial vignette effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Vignette<TColor, TPacked>(this Image<TColor, TPacked> source, TColor color)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vignette(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), color As TColor) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: color
      type: '{TColor}'
      description: The color to set as the vignette.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Vignette(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), TColor)
  name.vb: Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor)
- uid: ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  commentId: M:ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  id: Vignette``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Vignette<TColor, TPacked>(Image<TColor, TPacked>, Single, Single)
  nameWithType: ImageExtensions.Vignette<TColor, TPacked>(Image<TColor, TPacked>, Single, Single)
  fullName: ImageSharp.ImageExtensions.Vignette<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, System.Single)
  type: Method
  source:
    id: Vignette
    path: ''
    startLine: 5452
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial vignette effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Vignette<TColor, TPacked>(this Image<TColor, TPacked> source, float radiusX, float radiusY)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vignette(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), radiusX As Single, radiusY As Single) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: radiusX
      type: System.Single
      description: The the x-radius.
    - id: radiusY
      type: System.Single
      description: The the y-radius.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Vignette(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, System.Single)
  name.vb: Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Single)
- uid: ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: Vignette``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Vignette<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.Vignette<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.Vignette<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: Vignette
    path: ''
    startLine: 5469
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial vignette effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Vignette<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vignette(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Vignette(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},``0,System.Single,System.Single,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Vignette``2(ImageSharp.Image{``0,``1},``0,System.Single,System.Single,ImageSharp.Rectangle)
  id: Vignette``2(ImageSharp.Image{``0,``1},``0,System.Single,System.Single,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Vignette<TColor, TPacked>(Image<TColor, TPacked>, TColor, Single, Single, Rectangle)
  nameWithType: ImageExtensions.Vignette<TColor, TPacked>(Image<TColor, TPacked>, TColor, Single, Single, Rectangle)
  fullName: ImageSharp.ImageExtensions.Vignette<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, TColor, System.Single, System.Single, ImageSharp.Rectangle)
  type: Method
  source:
    id: Vignette
    path: ''
    startLine: 5489
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a radial vignette effect to an image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Vignette<TColor, TPacked>(this Image<TColor, TPacked> source, TColor color, float radiusX, float radiusY, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vignette(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), color As TColor, radiusX As Single, radiusY As Single, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: color
      type: '{TColor}'
      description: The color to set as the vignette.
    - id: radiusX
      type: System.Single
      description: The the x-radius.
    - id: radiusY
      type: System.Single
      description: The the y-radius.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor, Single, Single, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Vignette(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), TColor, System.Single, System.Single, ImageSharp.Rectangle)
  name.vb: Vignette(Of TColor, TPacked)(Image(Of TColor, TPacked), TColor, Single, Single, Rectangle)
- uid: ImageSharp.ImageExtensions.SaveAsBmp``2(ImageSharp.Image{``0,``1},System.IO.Stream)
  commentId: M:ImageSharp.ImageExtensions.SaveAsBmp``2(ImageSharp.Image{``0,``1},System.IO.Stream)
  id: SaveAsBmp``2(ImageSharp.Image{``0,``1},System.IO.Stream)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: SaveAsBmp<TColor, TPacked>(Image<TColor, TPacked>, Stream)
  nameWithType: ImageExtensions.SaveAsBmp<TColor, TPacked>(Image<TColor, TPacked>, Stream)
  fullName: ImageSharp.ImageExtensions.SaveAsBmp<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.IO.Stream)
  type: Method
  source:
    id: SaveAsBmp
    path: ''
    startLine: 18720
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nSaves the image to the given stream with the bmp format.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> SaveAsBmp<TColor, TPacked>(this Image<TColor, TPacked> source, Stream stream)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveAsBmp(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), stream As Stream) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: stream
      type: System.IO.Stream
      description: The stream to save the image to.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: "\nThe <xref href=\"ImageSharp.Image%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the stream is null.
  nameWithType.vb: ImageExtensions.SaveAsBmp(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.SaveAsBmp(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.IO.Stream)
  name.vb: SaveAsBmp(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream)
- uid: ImageSharp.ImageExtensions.SaveAsPng``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.SaveAsPng``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  id: SaveAsPng``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: SaveAsPng<TColor, TPacked>(Image<TColor, TPacked>, Stream, Int32)
  nameWithType: ImageExtensions.SaveAsPng<TColor, TPacked>(Image<TColor, TPacked>, Stream, Int32)
  fullName: ImageSharp.ImageExtensions.SaveAsPng<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.IO.Stream, System.Int32)
  type: Method
  source:
    id: SaveAsPng
    path: ''
    startLine: 18739
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nSaves the image to the given stream with the png format.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> SaveAsPng<TColor, TPacked>(this Image<TColor, TPacked> source, Stream stream, int quality = 2147483647)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveAsPng(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), stream As Stream, quality As Integer = 2147483647) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: stream
      type: System.IO.Stream
      description: The stream to save the image to.
    - id: quality
      type: System.Int32
      description: >
        The quality to save the image to representing the number of colors.

        Anything equal to 256 and below will cause the encoder to save the image in an indexed format.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: "\nThe <xref href=\"ImageSharp.Image%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the stream is null.
  nameWithType.vb: ImageExtensions.SaveAsPng(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.SaveAsPng(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.IO.Stream, System.Int32)
  name.vb: SaveAsPng(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream, Int32)
- uid: ImageSharp.ImageExtensions.SaveAsJpeg``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.SaveAsJpeg``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  id: SaveAsJpeg``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: SaveAsJpeg<TColor, TPacked>(Image<TColor, TPacked>, Stream, Int32)
  nameWithType: ImageExtensions.SaveAsJpeg<TColor, TPacked>(Image<TColor, TPacked>, Stream, Int32)
  fullName: ImageSharp.ImageExtensions.SaveAsJpeg<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.IO.Stream, System.Int32)
  type: Method
  source:
    id: SaveAsJpeg
    path: ''
    startLine: 18756
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nSaves the image to the given stream with the jpeg format.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> SaveAsJpeg<TColor, TPacked>(this Image<TColor, TPacked> source, Stream stream, int quality = 75)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveAsJpeg(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), stream As Stream, quality As Integer = 75) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: stream
      type: System.IO.Stream
      description: The stream to save the image to.
    - id: quality
      type: System.Int32
      description: The quality to save the image to. Between 1 and 100.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: "\nThe <xref href=\"ImageSharp.Image%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the stream is null.
  nameWithType.vb: ImageExtensions.SaveAsJpeg(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.SaveAsJpeg(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.IO.Stream, System.Int32)
  name.vb: SaveAsJpeg(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream, Int32)
- uid: ImageSharp.ImageExtensions.SaveAsGif``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.SaveAsGif``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  id: SaveAsGif``2(ImageSharp.Image{``0,``1},System.IO.Stream,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: SaveAsGif<TColor, TPacked>(Image<TColor, TPacked>, Stream, Int32)
  nameWithType: ImageExtensions.SaveAsGif<TColor, TPacked>(Image<TColor, TPacked>, Stream, Int32)
  fullName: ImageSharp.ImageExtensions.SaveAsGif<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.IO.Stream, System.Int32)
  type: Method
  source:
    id: SaveAsGif
    path: ''
    startLine: 18773
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nSaves the image to the given stream with the gif format.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> SaveAsGif<TColor, TPacked>(this Image<TColor, TPacked> source, Stream stream, int quality = 256)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveAsGif(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), stream As Stream, quality As Integer = 256) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: stream
      type: System.IO.Stream
      description: The stream to save the image to.
    - id: quality
      type: System.Int32
      description: The quality to save the image to representing the number of colors. Between 1 and 256.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: "\nThe <xref href=\"ImageSharp.Image%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the stream is null.
  nameWithType.vb: ImageExtensions.SaveAsGif(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.SaveAsGif(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.IO.Stream, System.Int32)
  name.vb: SaveAsGif(Of TColor, TPacked)(Image(Of TColor, TPacked), Stream, Int32)
- uid: ImageSharp.ImageExtensions.Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantization,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantization,System.Int32)
  id: Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantization,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Quantize<TColor, TPacked>(Image<TColor, TPacked>, Quantization, Int32)
  nameWithType: ImageExtensions.Quantize<TColor, TPacked>(Image<TColor, TPacked>, Quantization, Int32)
  fullName: ImageSharp.ImageExtensions.Quantize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Quantization, System.Int32)
  type: Method
  source:
    id: Quantize
    path: ''
    startLine: 26427
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies quantization to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Quantize<TColor, TPacked>(this Image<TColor, TPacked> source, Quantization mode = Quantization.Octree, int maxColors = 256)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Quantize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), mode As Quantization = Quantization.Octree, maxColors As Integer = 256) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: mode
      type: ImageSharp.Quantization
      description: The quantization mode to apply to perform the operation.
    - id: maxColors
      type: System.Int32
      description: The maximum number of colors to return. Defaults to 256.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Quantize(Of TColor, TPacked)(Image(Of TColor, TPacked), Quantization, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Quantize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Quantization, System.Int32)
  name.vb: Quantize(Of TColor, TPacked)(Image(Of TColor, TPacked), Quantization, Int32)
- uid: ImageSharp.ImageExtensions.Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantizers.IQuantizer{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantizers.IQuantizer{``0,``1},System.Int32)
  id: Quantize``2(ImageSharp.Image{``0,``1},ImageSharp.Quantizers.IQuantizer{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Quantize<TColor, TPacked>(Image<TColor, TPacked>, IQuantizer<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.Quantize<TColor, TPacked>(Image<TColor, TPacked>, IQuantizer<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.Quantize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Quantizers.IQuantizer<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: Quantize
    path: ''
    startLine: 26459
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies quantization to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Quantize<TColor, TPacked>(this Image<TColor, TPacked> source, IQuantizer<TColor, TPacked> quantizer, int maxColors)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Quantize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), quantizer As IQuantizer(Of TColor, TPacked), maxColors As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: quantizer
      type: ImageSharp.Quantizers.IQuantizer{{TColor},{TPacked}}
      description: The quantizer to apply to perform the operation.
    - id: maxColors
      type: System.Int32
      description: The maximum number of colors to return.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Quantize(Of TColor, TPacked)(Image(Of TColor, TPacked), IQuantizer(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Quantize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Quantizers.IQuantizer(Of TColor, TPacked), System.Int32)
  name.vb: Quantize(Of TColor, TPacked)(Image(Of TColor, TPacked), IQuantizer(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.AutoOrient``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.AutoOrient``2(ImageSharp.Image{``0,``1})
  id: AutoOrient``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: AutoOrient<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.AutoOrient<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.AutoOrient<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: AutoOrient
    path: ''
    startLine: 28240
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAdjusts an image so that its orientation is suitable for viewing.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> AutoOrient<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AutoOrient(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to auto rotate.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.AutoOrient(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.AutoOrient(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: AutoOrient(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32)
  id: BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: BoxBlur<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.BoxBlur<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.BoxBlur<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: BoxBlur
    path: ''
    startLine: 28330
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a box blur to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> BoxBlur<TColor, TPacked>(this Image<TColor, TPacked> source, int radius = 7)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BoxBlur(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), radius As Integer = 7) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: radius
      type: System.Int32
      description: The 'radius' value representing the size of the area to sample.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.BoxBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.BoxBlur(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32)
  name.vb: BoxBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  id: BoxBlur``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: BoxBlur<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  nameWithType: ImageExtensions.BoxBlur<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.BoxBlur<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: BoxBlur
    path: ''
    startLine: 28348
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a box blur to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> BoxBlur<TColor, TPacked>(this Image<TColor, TPacked> source, int radius, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BoxBlur(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), radius As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: radius
      type: System.Int32
      description: The 'radius' value representing the size of the area to sample.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.BoxBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.BoxBlur(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, ImageSharp.Rectangle)
  name.vb: BoxBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  id: Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Crop<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  nameWithType: ImageExtensions.Crop<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  fullName: ImageSharp.ImageExtensions.Crop<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32)
  type: Method
  source:
    id: Crop
    path: ''
    startLine: 28380
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nCrops an image to the given width and height.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Crop<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Crop(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to resize.
    - id: width
      type: System.Int32
      description: The target image width.
    - id: height
      type: System.Int32
      description: The target image height.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Crop(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Crop(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32)
  name.vb: Crop(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
- uid: ImageSharp.ImageExtensions.Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  id: Crop``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Crop<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, Rectangle)
  nameWithType: ImageExtensions.Crop<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.Crop<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: Crop
    path: ''
    startLine: 28403
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nCrops an image to the given width and height with the given source rectangle.\n<remarks>\nIf the source rectangle is smaller than the target dimensions then the\narea within the source is resized performing a zoomed crop.\n</remarks>\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Crop<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height, Rectangle sourceRectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Crop(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer, sourceRectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to crop.
    - id: width
      type: System.Int32
      description: The target image width.
    - id: height
      type: System.Int32
      description: The target image height.
    - id: sourceRectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to draw.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Crop(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Crop(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32, ImageSharp.Rectangle)
  name.vb: Crop(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1})
  id: DetectEdges``2(ImageSharp.Image{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: DetectEdges<TColor, TPacked>(Image<TColor, TPacked>)
  nameWithType: ImageExtensions.DetectEdges<TColor, TPacked>(Image<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.DetectEdges<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>)
  type: Method
  source:
    id: DetectEdges
    path: ''
    startLine: 28445
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nDetects any edges within the image. Uses the <xref href=\"ImageSharp.Processors.SobelProcessor%602\" data-throw-if-not-resolved=\"false\"></xref> filter\noperating in Grayscale mode.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> DetectEdges<TColor, TPacked>(this Image<TColor, TPacked> source)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DetectEdges(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.DetectEdges(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked))
  name.vb: DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  id: DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  nameWithType: ImageExtensions.DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, Rectangle)
  fullName: ImageSharp.ImageExtensions.DetectEdges<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle)
  type: Method
  source:
    id: DetectEdges
    path: ''
    startLine: 28463
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nDetects any edges within the image. Uses the <xref href=\"ImageSharp.Processors.SobelProcessor%602\" data-throw-if-not-resolved=\"false\"></xref> filter\noperating in Grayscale mode.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> DetectEdges<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DetectEdges(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.DetectEdges(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle)
  name.vb: DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle)
- uid: ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,System.Boolean)
  commentId: M:ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,System.Boolean)
  id: DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,System.Boolean)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, EdgeDetection, Boolean)
  nameWithType: ImageExtensions.DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, EdgeDetection, Boolean)
  fullName: ImageSharp.ImageExtensions.DetectEdges<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.EdgeDetection, System.Boolean)
  type: Method
  source:
    id: DetectEdges
    path: ''
    startLine: 28479
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nDetects any edges within the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> DetectEdges<TColor, TPacked>(this Image<TColor, TPacked> source, EdgeDetection filter, bool grayscale = true)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DetectEdges(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), filter As EdgeDetection, grayscale As Boolean = True) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: filter
      type: ImageSharp.EdgeDetection
      description: The filter for detecting edges.
    - id: grayscale
      type: System.Boolean
      description: Whether to convert the image to Grayscale first. Defaults to true.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), EdgeDetection, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.DetectEdges(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.EdgeDetection, System.Boolean)
  name.vb: DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), EdgeDetection, Boolean)
- uid: ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,ImageSharp.Rectangle,System.Boolean)
  commentId: M:ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,ImageSharp.Rectangle,System.Boolean)
  id: DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.EdgeDetection,ImageSharp.Rectangle,System.Boolean)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, EdgeDetection, Rectangle, Boolean)
  nameWithType: ImageExtensions.DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, EdgeDetection, Rectangle, Boolean)
  fullName: ImageSharp.ImageExtensions.DetectEdges<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.EdgeDetection, ImageSharp.Rectangle, System.Boolean)
  type: Method
  source:
    id: DetectEdges
    path: ''
    startLine: 28498
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nDetects any edges within the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> DetectEdges<TColor, TPacked>(this Image<TColor, TPacked> source, EdgeDetection filter, Rectangle rectangle, bool grayscale = true)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DetectEdges(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), filter As EdgeDetection, rectangle As Rectangle, grayscale As Boolean = True) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: filter
      type: ImageSharp.EdgeDetection
      description: The filter for detecting edges.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    - id: grayscale
      type: System.Boolean
      description: Whether to convert the image to Grayscale first. Defaults to true.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), EdgeDetection, Rectangle, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.DetectEdges(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.EdgeDetection, ImageSharp.Rectangle, System.Boolean)
  name.vb: DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), EdgeDetection, Rectangle, Boolean)
- uid: ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  id: DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, IEdgeDetectorFilter<TColor, TPacked>)
  nameWithType: ImageExtensions.DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, IEdgeDetectorFilter<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.DetectEdges<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Processors.IEdgeDetectorFilter<TColor, TPacked>)
  type: Method
  source:
    id: DetectEdges
    path: ''
    startLine: 28558
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nDetects any edges within the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> DetectEdges<TColor, TPacked>(this Image<TColor, TPacked> source, IEdgeDetectorFilter<TColor, TPacked> filter)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DetectEdges(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), filter As IEdgeDetectorFilter(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: filter
      type: ImageSharp.Processors.IEdgeDetectorFilter{{TColor},{TPacked}}
      description: The filter for detecting edges.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), IEdgeDetectorFilter(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.DetectEdges(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Processors.IEdgeDetectorFilter(Of TColor, TPacked))
  name.vb: DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), IEdgeDetectorFilter(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  commentId: M:ImageSharp.ImageExtensions.DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  id: DetectEdges``2(ImageSharp.Image{``0,``1},ImageSharp.Rectangle,ImageSharp.Processors.IEdgeDetectorFilter{``0,``1})
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, Rectangle, IEdgeDetectorFilter<TColor, TPacked>)
  nameWithType: ImageExtensions.DetectEdges<TColor, TPacked>(Image<TColor, TPacked>, Rectangle, IEdgeDetectorFilter<TColor, TPacked>)
  fullName: ImageSharp.ImageExtensions.DetectEdges<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.Rectangle, ImageSharp.Processors.IEdgeDetectorFilter<TColor, TPacked>)
  type: Method
  source:
    id: DetectEdges
    path: ''
    startLine: 28576
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nDetects any edges within the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> DetectEdges<TColor, TPacked>(this Image<TColor, TPacked> source, Rectangle rectangle, IEdgeDetectorFilter<TColor, TPacked> filter)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DetectEdges(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rectangle As Rectangle, filter As IEdgeDetectorFilter(Of TColor, TPacked)) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    - id: filter
      type: ImageSharp.Processors.IEdgeDetectorFilter{{TColor},{TPacked}}
      description: The filter for detecting edges.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle, IEdgeDetectorFilter(Of TColor, TPacked))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.DetectEdges(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.Rectangle, ImageSharp.Processors.IEdgeDetectorFilter(Of TColor, TPacked))
  name.vb: DetectEdges(Of TColor, TPacked)(Image(Of TColor, TPacked), Rectangle, IEdgeDetectorFilter(Of TColor, TPacked))
- uid: ImageSharp.ImageExtensions.EntropyCrop``2(ImageSharp.Image{``0,``1},System.Single)
  commentId: M:ImageSharp.ImageExtensions.EntropyCrop``2(ImageSharp.Image{``0,``1},System.Single)
  id: EntropyCrop``2(ImageSharp.Image{``0,``1},System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: EntropyCrop<TColor, TPacked>(Image<TColor, TPacked>, Single)
  nameWithType: ImageExtensions.EntropyCrop<TColor, TPacked>(Image<TColor, TPacked>, Single)
  fullName: ImageSharp.ImageExtensions.EntropyCrop<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single)
  type: Method
  source:
    id: EntropyCrop
    path: ''
    startLine: 28606
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nCrops an image to the area of greatest entropy.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> EntropyCrop<TColor, TPacked>(this Image<TColor, TPacked> source, float threshold = 0.5F)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EntropyCrop(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), threshold As Single = 0.5F) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to crop.
    - id: threshold
      type: System.Single
      description: The threshold for entropic density.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.EntropyCrop(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.EntropyCrop(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single)
  name.vb: EntropyCrop(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
- uid: ImageSharp.ImageExtensions.Flip``2(ImageSharp.Image{``0,``1},ImageSharp.FlipType)
  commentId: M:ImageSharp.ImageExtensions.Flip``2(ImageSharp.Image{``0,``1},ImageSharp.FlipType)
  id: Flip``2(ImageSharp.Image{``0,``1},ImageSharp.FlipType)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Flip<TColor, TPacked>(Image<TColor, TPacked>, FlipType)
  nameWithType: ImageExtensions.Flip<TColor, TPacked>(Image<TColor, TPacked>, FlipType)
  fullName: ImageSharp.ImageExtensions.Flip<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.FlipType)
  type: Method
  source:
    id: Flip
    path: ''
    startLine: 28637
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nFlips an image by the given instructions.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Flip<TColor, TPacked>(this Image<TColor, TPacked> source, FlipType flipType)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Flip(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), flipType As FlipType) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to rotate, flip, or both.
    - id: flipType
      type: ImageSharp.FlipType
      description: The <xref href="ImageSharp.FlipType" data-throw-if-not-resolved="false"></xref> to perform the flip.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Flip(Of TColor, TPacked)(Image(Of TColor, TPacked), FlipType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Flip(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.FlipType)
  name.vb: Flip(Of TColor, TPacked)(Image(Of TColor, TPacked), FlipType)
- uid: ImageSharp.ImageExtensions.GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single)
  commentId: M:ImageSharp.ImageExtensions.GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single)
  id: GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: GuassianBlur<TColor, TPacked>(Image<TColor, TPacked>, Single)
  nameWithType: ImageExtensions.GuassianBlur<TColor, TPacked>(Image<TColor, TPacked>, Single)
  fullName: ImageSharp.ImageExtensions.GuassianBlur<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single)
  type: Method
  source:
    id: GuassianBlur
    path: ''
    startLine: 28668
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a Guassian blur to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> GuassianBlur<TColor, TPacked>(this Image<TColor, TPacked> source, float sigma = 3F)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GuassianBlur(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), sigma As Single = 3F) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: sigma
      type: System.Single
      description: The 'sigma' value representing the weight of the blur.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.GuassianBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.GuassianBlur(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single)
  name.vb: GuassianBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
- uid: ImageSharp.ImageExtensions.GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  id: GuassianBlur``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: GuassianBlur<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  nameWithType: ImageExtensions.GuassianBlur<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  fullName: ImageSharp.ImageExtensions.GuassianBlur<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, ImageSharp.Rectangle)
  type: Method
  source:
    id: GuassianBlur
    path: ''
    startLine: 28686
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a Guassian blur to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> GuassianBlur<TColor, TPacked>(this Image<TColor, TPacked> source, float sigma, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GuassianBlur(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), sigma As Single, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: sigma
      type: System.Single
      description: The 'sigma' value representing the weight of the blur.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.GuassianBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.GuassianBlur(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, ImageSharp.Rectangle)
  name.vb: GuassianBlur(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
- uid: ImageSharp.ImageExtensions.GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single)
  commentId: M:ImageSharp.ImageExtensions.GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single)
  id: GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: GuassianSharpen<TColor, TPacked>(Image<TColor, TPacked>, Single)
  nameWithType: ImageExtensions.GuassianSharpen<TColor, TPacked>(Image<TColor, TPacked>, Single)
  fullName: ImageSharp.ImageExtensions.GuassianSharpen<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single)
  type: Method
  source:
    id: GuassianSharpen
    path: ''
    startLine: 28716
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a Guassian sharpening filter to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> GuassianSharpen<TColor, TPacked>(this Image<TColor, TPacked> source, float sigma = 3F)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GuassianSharpen(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), sigma As Single = 3F) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: sigma
      type: System.Single
      description: The 'sigma' value representing the weight of the blur.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.GuassianSharpen(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.GuassianSharpen(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single)
  name.vb: GuassianSharpen(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
- uid: ImageSharp.ImageExtensions.GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  id: GuassianSharpen``2(ImageSharp.Image{``0,``1},System.Single,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: GuassianSharpen<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  nameWithType: ImageExtensions.GuassianSharpen<TColor, TPacked>(Image<TColor, TPacked>, Single, Rectangle)
  fullName: ImageSharp.ImageExtensions.GuassianSharpen<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, ImageSharp.Rectangle)
  type: Method
  source:
    id: GuassianSharpen
    path: ''
    startLine: 28734
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nApplies a Guassian sharpening filter to the image.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> GuassianSharpen<TColor, TPacked>(this Image<TColor, TPacked> source, float sigma, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GuassianSharpen(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), sigma As Single, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: sigma
      type: System.Single
      description: The 'sigma' value representing the weight of the blur.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.GuassianSharpen(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.GuassianSharpen(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, ImageSharp.Rectangle)
  name.vb: GuassianSharpen(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Rectangle)
- uid: ImageSharp.ImageExtensions.OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  id: OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: OilPaint<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  nameWithType: ImageExtensions.OilPaint<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  fullName: ImageSharp.ImageExtensions.OilPaint<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32)
  type: Method
  source:
    id: OilPaint
    path: ''
    startLine: 28768
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an oil painting effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> OilPaint<TColor, TPacked>(this Image<TColor, TPacked> source, int levels = 10, int brushSize = 15)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OilPaint(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), levels As Integer = 10, brushSize As Integer = 15) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: levels
      type: System.Int32
      description: The number of intensity levels. Higher values result in a broader range of colour intensities forming part of the result image.
    - id: brushSize
      type: System.Int32
      description: The number of neighbouring pixels used in calculating each individual pixel value.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.OilPaint(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.OilPaint(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32)
  name.vb: OilPaint(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
- uid: ImageSharp.ImageExtensions.OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  id: OilPaint``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: OilPaint<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, Rectangle)
  nameWithType: ImageExtensions.OilPaint<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.OilPaint<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: OilPaint
    path: ''
    startLine: 28787
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nAlters the colors of the image recreating an oil painting effect.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> OilPaint<TColor, TPacked>(this Image<TColor, TPacked> source, int levels, int brushSize, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OilPaint(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), levels As Integer, brushSize As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: levels
      type: System.Int32
      description: The number of intensity levels. Higher values result in a broader range of colour intensities forming part of the result image.
    - id: brushSize
      type: System.Int32
      description: The number of neighbouring pixels used in calculating each individual pixel value.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.OilPaint(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.OilPaint(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32, ImageSharp.Rectangle)
  name.vb: OilPaint(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.Pad``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Pad``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  id: Pad``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Pad<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  nameWithType: ImageExtensions.Pad<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  fullName: ImageSharp.ImageExtensions.Pad<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32)
  type: Method
  source:
    id: Pad
    path: ''
    startLine: 28823
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nEvenly pads an image to fit the new dimensions.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Pad<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Pad(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The source image to pad.
    - id: width
      type: System.Int32
      description: The new width.
    - id: height
      type: System.Int32
      description: The new height.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Pad(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Pad(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32)
  name.vb: Pad(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
- uid: ImageSharp.ImageExtensions.Pixelate``2(ImageSharp.Image{``0,``1},System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Pixelate``2(ImageSharp.Image{``0,``1},System.Int32)
  id: Pixelate``2(ImageSharp.Image{``0,``1},System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Pixelate<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  nameWithType: ImageExtensions.Pixelate<TColor, TPacked>(Image<TColor, TPacked>, Int32)
  fullName: ImageSharp.ImageExtensions.Pixelate<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32)
  type: Method
  source:
    id: Pixelate
    path: ''
    startLine: 28862
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nPixelates an image with the given pixel size.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Pixelate<TColor, TPacked>(this Image<TColor, TPacked> source, int size = 4)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Pixelate(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), size As Integer = 4) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: size
      type: System.Int32
      description: The size of the pixels.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Pixelate(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Pixelate(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32)
  name.vb: Pixelate(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32)
- uid: ImageSharp.ImageExtensions.Pixelate``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  commentId: M:ImageSharp.ImageExtensions.Pixelate``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  id: Pixelate``2(ImageSharp.Image{``0,``1},System.Int32,ImageSharp.Rectangle)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Pixelate<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  nameWithType: ImageExtensions.Pixelate<TColor, TPacked>(Image<TColor, TPacked>, Int32, Rectangle)
  fullName: ImageSharp.ImageExtensions.Pixelate<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, ImageSharp.Rectangle)
  type: Method
  source:
    id: Pixelate
    path: ''
    startLine: 28880
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nPixelates an image with the given pixel size.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Pixelate<TColor, TPacked>(this Image<TColor, TPacked> source, int size, Rectangle rectangle)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Pixelate(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), size As Integer, rectangle As Rectangle) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image this method extends.
    - id: size
      type: System.Int32
      description: The size of the pixels.
    - id: rectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to alter.\n"
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ImageExtensions.Pixelate(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Pixelate(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, ImageSharp.Rectangle)
  name.vb: Pixelate(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Rectangle)
- uid: ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},ImageSharp.ResizeOptions)
  commentId: M:ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},ImageSharp.ResizeOptions)
  id: Resize``2(ImageSharp.Image{``0,``1},ImageSharp.ResizeOptions)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Resize<TColor, TPacked>(Image<TColor, TPacked>, ResizeOptions)
  nameWithType: ImageExtensions.Resize<TColor, TPacked>(Image<TColor, TPacked>, ResizeOptions)
  fullName: ImageSharp.ImageExtensions.Resize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.ResizeOptions)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 28916
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nResizes an image in accordance with the given <xref href=\"ImageSharp.ResizeOptions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: Passing zero for one of height or width within the resize options will automatically preserve the aspect ratio of the original image
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Resize<TColor, TPacked>(this Image<TColor, TPacked> source, ResizeOptions options)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Resize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), options As ResizeOptions) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to resize.
    - id: options
      type: ImageSharp.ResizeOptions
      description: The resize options.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), ResizeOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Resize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.ResizeOptions)
  name.vb: Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), ResizeOptions)
- uid: ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  commentId: M:ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  id: Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  nameWithType: ImageExtensions.Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32)
  fullName: ImageSharp.ImageExtensions.Resize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 28946
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nResizes an image to the given width and height.\n"
  remarks: Passing zero for one of height or width will automatically preserve the aspect ratio of the original image
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Resize<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Resize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to resize.
    - id: width
      type: System.Int32
      description: The target image width.
    - id: height
      type: System.Int32
      description: The target image height.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Resize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32)
  name.vb: Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32)
- uid: ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,System.Boolean)
  commentId: M:ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,System.Boolean)
  id: Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, Boolean)
  nameWithType: ImageExtensions.Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, Boolean)
  fullName: ImageSharp.ImageExtensions.Resize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32, System.Boolean)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 28964
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nResizes an image to the given width and height.\n"
  remarks: Passing zero for one of height or width will automatically preserve the aspect ratio of the original image
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Resize<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height, bool compand)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Resize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer, compand As Boolean) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to resize.
    - id: width
      type: System.Int32
      description: The target image width.
    - id: height
      type: System.Int32
      description: The target image height.
    - id: compand
      type: System.Boolean
      description: Whether to compress and expand the image color-space to gamma correct the image during processing.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Resize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32, System.Boolean)
  name.vb: Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, Boolean)
- uid: ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler)
  commentId: M:ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler)
  id: Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, IResampler)
  nameWithType: ImageExtensions.Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, IResampler)
  fullName: ImageSharp.ImageExtensions.Resize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32, ImageSharp.IResampler)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 28982
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nResizes an image to the given width and height with the given sampler.\n"
  remarks: Passing zero for one of height or width will automatically preserve the aspect ratio of the original image
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Resize<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height, IResampler sampler)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Resize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer, sampler As IResampler) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to resize.
    - id: width
      type: System.Int32
      description: The target image width.
    - id: height
      type: System.Int32
      description: The target image height.
    - id: sampler
      type: ImageSharp.IResampler
      description: The <xref href="ImageSharp.IResampler" data-throw-if-not-resolved="false"></xref> to perform the resampling.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, IResampler)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Resize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32, ImageSharp.IResampler)
  name.vb: Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, IResampler)
- uid: ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,System.Boolean)
  commentId: M:ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,System.Boolean)
  id: Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,System.Boolean)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, IResampler, Boolean)
  nameWithType: ImageExtensions.Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, IResampler, Boolean)
  fullName: ImageSharp.ImageExtensions.Resize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32, ImageSharp.IResampler, System.Boolean)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 29001
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nResizes an image to the given width and height with the given sampler.\n"
  remarks: Passing zero for one of height or width will automatically preserve the aspect ratio of the original image
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Resize<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height, IResampler sampler, bool compand)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Resize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer, sampler As IResampler, compand As Boolean) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to resize.
    - id: width
      type: System.Int32
      description: The target image width.
    - id: height
      type: System.Int32
      description: The target image height.
    - id: sampler
      type: ImageSharp.IResampler
      description: The <xref href="ImageSharp.IResampler" data-throw-if-not-resolved="false"></xref> to perform the resampling.
    - id: compand
      type: System.Boolean
      description: Whether to compress and expand the image color-space to gamma correct the image during processing.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, IResampler, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Resize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32, ImageSharp.IResampler, System.Boolean)
  name.vb: Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, IResampler, Boolean)
- uid: ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,ImageSharp.Rectangle,ImageSharp.Rectangle,System.Boolean)
  commentId: M:ImageSharp.ImageExtensions.Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,ImageSharp.Rectangle,ImageSharp.Rectangle,System.Boolean)
  id: Resize``2(ImageSharp.Image{``0,``1},System.Int32,System.Int32,ImageSharp.IResampler,ImageSharp.Rectangle,ImageSharp.Rectangle,System.Boolean)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, IResampler, Rectangle, Rectangle, Boolean)
  nameWithType: ImageExtensions.Resize<TColor, TPacked>(Image<TColor, TPacked>, Int32, Int32, IResampler, Rectangle, Rectangle, Boolean)
  fullName: ImageSharp.ImageExtensions.Resize<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Int32, System.Int32, ImageSharp.IResampler, ImageSharp.Rectangle, ImageSharp.Rectangle, System.Boolean)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 29027
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nResizes an image to the given width and height with the given sampler and\nsource rectangle.\n"
  remarks: Passing zero for one of height or width will automatically preserve the aspect ratio of the original image
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Resize<TColor, TPacked>(this Image<TColor, TPacked> source, int width, int height, IResampler sampler, Rectangle sourceRectangle, Rectangle targetRectangle, bool compand = false)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Resize(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), width As Integer, height As Integer, sampler As IResampler, sourceRectangle As Rectangle, targetRectangle As Rectangle, compand As Boolean = False) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to resize.
    - id: width
      type: System.Int32
      description: The target image width.
    - id: height
      type: System.Int32
      description: The target image height.
    - id: sampler
      type: ImageSharp.IResampler
      description: The <xref href="ImageSharp.IResampler" data-throw-if-not-resolved="false"></xref> to perform the resampling.
    - id: sourceRectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the image object to draw.\n"
    - id: targetRectangle
      type: ImageSharp.Rectangle
      description: "\nThe <xref href=\"ImageSharp.Rectangle\" data-throw-if-not-resolved=\"false\"></xref> structure that specifies the portion of the target image object to draw to.\n"
    - id: compand
      type: System.Boolean
      description: Whether to compress and expand the image color-space to gamma correct the image during processing.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image%602" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, IResampler, Rectangle, Rectangle, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Resize(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Int32, System.Int32, ImageSharp.IResampler, ImageSharp.Rectangle, ImageSharp.Rectangle, System.Boolean)
  name.vb: Resize(Of TColor, TPacked)(Image(Of TColor, TPacked), Int32, Int32, IResampler, Rectangle, Rectangle, Boolean)
- uid: ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},System.Single)
  commentId: M:ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},System.Single)
  id: Rotate``2(ImageSharp.Image{``0,``1},System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Rotate<TColor, TPacked>(Image<TColor, TPacked>, Single)
  nameWithType: ImageExtensions.Rotate<TColor, TPacked>(Image<TColor, TPacked>, Single)
  fullName: ImageSharp.ImageExtensions.Rotate<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single)
  type: Method
  source:
    id: Rotate
    path: ''
    startLine: 29084
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nRotates an image by the given angle in degrees, expanding the image to fit the rotated result.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Rotate<TColor, TPacked>(this Image<TColor, TPacked> source, float degrees)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Rotate(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), degrees As Single) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to rotate.
    - id: degrees
      type: System.Single
      description: The angle in degrees to perform the rotation.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Rotate(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Rotate(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single)
  name.vb: Rotate(Of TColor, TPacked)(Image(Of TColor, TPacked), Single)
- uid: ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType)
  commentId: M:ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType)
  id: Rotate``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Rotate<TColor, TPacked>(Image<TColor, TPacked>, RotateType)
  nameWithType: ImageExtensions.Rotate<TColor, TPacked>(Image<TColor, TPacked>, RotateType)
  fullName: ImageSharp.ImageExtensions.Rotate<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.RotateType)
  type: Method
  source:
    id: Rotate
    path: ''
    startLine: 29099
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nRotates and flips an image by the given instructions.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Rotate<TColor, TPacked>(this Image<TColor, TPacked> source, RotateType rotateType)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Rotate(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rotateType As RotateType) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to rotate.
    - id: rotateType
      type: ImageSharp.RotateType
      description: The <xref href="ImageSharp.RotateType" data-throw-if-not-resolved="false"></xref> to perform the rotation.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Rotate(Of TColor, TPacked)(Image(Of TColor, TPacked), RotateType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Rotate(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.RotateType)
  name.vb: Rotate(Of TColor, TPacked)(Image(Of TColor, TPacked), RotateType)
- uid: ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},System.Single,System.Boolean)
  commentId: M:ImageSharp.ImageExtensions.Rotate``2(ImageSharp.Image{``0,``1},System.Single,System.Boolean)
  id: Rotate``2(ImageSharp.Image{``0,``1},System.Single,System.Boolean)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Rotate<TColor, TPacked>(Image<TColor, TPacked>, Single, Boolean)
  nameWithType: ImageExtensions.Rotate<TColor, TPacked>(Image<TColor, TPacked>, Single, Boolean)
  fullName: ImageSharp.ImageExtensions.Rotate<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, System.Boolean)
  type: Method
  source:
    id: Rotate
    path: ''
    startLine: 29115
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nRotates an image by the given angle in degrees.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Rotate<TColor, TPacked>(this Image<TColor, TPacked> source, float degrees, bool expand)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Rotate(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), degrees As Single, expand As Boolean) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to rotate.
    - id: degrees
      type: System.Single
      description: The angle in degrees to perform the rotation.
    - id: expand
      type: System.Boolean
      description: Whether to expand the image to fit the rotated result.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Rotate(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Rotate(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, System.Boolean)
  name.vb: Rotate(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Boolean)
- uid: ImageSharp.ImageExtensions.RotateFlip``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType,ImageSharp.FlipType)
  commentId: M:ImageSharp.ImageExtensions.RotateFlip``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType,ImageSharp.FlipType)
  id: RotateFlip``2(ImageSharp.Image{``0,``1},ImageSharp.RotateType,ImageSharp.FlipType)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: RotateFlip<TColor, TPacked>(Image<TColor, TPacked>, RotateType, FlipType)
  nameWithType: ImageExtensions.RotateFlip<TColor, TPacked>(Image<TColor, TPacked>, RotateType, FlipType)
  fullName: ImageSharp.ImageExtensions.RotateFlip<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, ImageSharp.RotateType, ImageSharp.FlipType)
  type: Method
  source:
    id: RotateFlip
    path: ''
    startLine: 29146
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nRotates and flips an image by the given instructions.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> RotateFlip<TColor, TPacked>(this Image<TColor, TPacked> source, RotateType rotateType, FlipType flipType)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RotateFlip(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), rotateType As RotateType, flipType As FlipType) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to rotate, flip, or both.
    - id: rotateType
      type: ImageSharp.RotateType
      description: The <xref href="ImageSharp.RotateType" data-throw-if-not-resolved="false"></xref> to perform the rotation.
    - id: flipType
      type: ImageSharp.FlipType
      description: The <xref href="ImageSharp.FlipType" data-throw-if-not-resolved="false"></xref> to perform the flip.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.RotateFlip(Of TColor, TPacked)(Image(Of TColor, TPacked), RotateType, FlipType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.RotateFlip(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), ImageSharp.RotateType, ImageSharp.FlipType)
  name.vb: RotateFlip(Of TColor, TPacked)(Image(Of TColor, TPacked), RotateType, FlipType)
- uid: ImageSharp.ImageExtensions.Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  commentId: M:ImageSharp.ImageExtensions.Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  id: Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Skew<TColor, TPacked>(Image<TColor, TPacked>, Single, Single)
  nameWithType: ImageExtensions.Skew<TColor, TPacked>(Image<TColor, TPacked>, Single, Single)
  fullName: ImageSharp.ImageExtensions.Skew<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, System.Single)
  type: Method
  source:
    id: Skew
    path: ''
    startLine: 29178
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nSkews an image by the given angles in degrees, expanding the image to fit the skewed result.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Skew<TColor, TPacked>(this Image<TColor, TPacked> source, float degreesX, float degreesY)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skew(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), degreesX As Single, degreesY As Single) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to skew.
    - id: degreesX
      type: System.Single
      description: The angle in degrees to perform the rotation along the x-axis.
    - id: degreesY
      type: System.Single
      description: The angle in degrees to perform the rotation along the y-axis.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Skew(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Skew(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, System.Single)
  name.vb: Skew(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Single)
- uid: ImageSharp.ImageExtensions.Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single,System.Boolean)
  commentId: M:ImageSharp.ImageExtensions.Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single,System.Boolean)
  id: Skew``2(ImageSharp.Image{``0,``1},System.Single,System.Single,System.Boolean)
  isExtensionMethod: true
  parent: ImageSharp.ImageExtensions
  langs:
  - csharp
  - vb
  name: Skew<TColor, TPacked>(Image<TColor, TPacked>, Single, Single, Boolean)
  nameWithType: ImageExtensions.Skew<TColor, TPacked>(Image<TColor, TPacked>, Single, Single, Boolean)
  fullName: ImageSharp.ImageExtensions.Skew<TColor, TPacked>(ImageSharp.Image<TColor, TPacked>, System.Single, System.Single, System.Boolean)
  type: Method
  source:
    id: Skew
    path: ''
    startLine: 29195
  assemblies:
  - cs.temp.dll
  namespace: ImageSharp
  summary: "\nSkews an image by the given angles in degrees.\n"
  example: []
  syntax:
    content: 'public static Image<TColor, TPacked> Skew<TColor, TPacked>(this Image<TColor, TPacked> source, float degreesX, float degreesY, bool expand)where TColor : struct, IPackedPixel<TPacked> where TPacked : struct'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skew(Of TColor As {Structure, IPackedPixel(Of TPacked)}, TPacked As Structure)(source As Image(Of TColor, TPacked), degreesX As Single, degreesY As Single, expand As Boolean) As Image(Of TColor, TPacked)
    parameters:
    - id: source
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The image to skew.
    - id: degreesX
      type: System.Single
      description: The angle in degrees to perform the rotation along the x-axis.
    - id: degreesY
      type: System.Single
      description: The angle in degrees to perform the rotation along the y-axis.
    - id: expand
      type: System.Boolean
      description: Whether to expand the image to fit the skewed result.
    typeParameters:
    - id: TColor
      description: The pixel format.
    - id: TPacked
      description: The packed format. <example>uint, long, float.</example>
    return:
      type: ImageSharp.Image{{TColor},{TPacked}}
      description: The <xref href="ImageSharp.Image" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: ImageExtensions.Skew(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Single, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ImageSharp.ImageExtensions.Skew(Of TColor, TPacked)(ImageSharp.Image(Of TColor, TPacked), System.Single, System.Single, System.Boolean)
  name.vb: Skew(Of TColor, TPacked)(Image(Of TColor, TPacked), Single, Single, Boolean)
references:
- uid: ImageSharp.Image
  commentId: T:ImageSharp.Image
  parent: ImageSharp
  isExternal: false
  name: Image
  nameWithType: Image
  fullName: ImageSharp.Image
- uid: ImageSharp.Image`2
  commentId: T:ImageSharp.Image`2
  parent: ImageSharp
  isExternal: false
  name: Image<TColor, TPacked>
  nameWithType: Image<TColor, TPacked>
  fullName: ImageSharp.Image<TColor, TPacked>
  nameWithType.vb: Image(Of TColor, TPacked)
  fullname.vb: ImageSharp.Image(Of TColor, TPacked)
  name.vb: Image(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Image`2
    name: Image
    nameWithType: Image
    fullName: ImageSharp.Image
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Image`2
    name: Image
    nameWithType: Image
    fullName: ImageSharp.Image
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp
  commentId: N:ImageSharp
  isExternal: false
  name: ImageSharp
  nameWithType: ImageSharp
  fullName: ImageSharp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: ImageSharp.Image{{TColor},{TPacked}}
  commentId: T:ImageSharp.Image{``0,``1}
  parent: ImageSharp
  definition: ImageSharp.Image`2
  name: Image<TColor, TPacked>
  nameWithType: Image<TColor, TPacked>
  fullName: ImageSharp.Image<TColor, TPacked>
  nameWithType.vb: Image(Of TColor, TPacked)
  fullname.vb: ImageSharp.Image(Of TColor, TPacked)
  name.vb: Image(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Image`2
    name: Image
    nameWithType: Image
    fullName: ImageSharp.Image
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Image`2
    name: Image
    nameWithType: Image
    fullName: ImageSharp.Image
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ImageSharp.Rectangle
  commentId: T:ImageSharp.Rectangle
  parent: ImageSharp
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: ImageSharp.Rectangle
- uid: '{TColor}'
  commentId: '!:TColor'
  definition: TColor
  name: TColor
  nameWithType: TColor
  fullName: TColor
- uid: TColor
  isExternal: false
  name: TColor
  nameWithType: TColor
  fullName: TColor
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: ImageSharp.ImageBase{{TColor},{TPacked}}
  commentId: T:ImageSharp.ImageBase{``0,``1}
  parent: ImageSharp
  definition: ImageSharp.ImageBase`2
  name: ImageBase<TColor, TPacked>
  nameWithType: ImageBase<TColor, TPacked>
  fullName: ImageSharp.ImageBase<TColor, TPacked>
  nameWithType.vb: ImageBase(Of TColor, TPacked)
  fullname.vb: ImageSharp.ImageBase(Of TColor, TPacked)
  name.vb: ImageBase(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.ImageBase`2
  commentId: T:ImageSharp.ImageBase`2
  parent: ImageSharp
  isExternal: false
  name: ImageBase<TColor, TPacked>
  nameWithType: ImageBase<TColor, TPacked>
  fullName: ImageSharp.ImageBase<TColor, TPacked>
  nameWithType.vb: ImageBase(Of TColor, TPacked)
  fullname.vb: ImageSharp.ImageBase(Of TColor, TPacked)
  name.vb: ImageBase(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.ImageBase`2
    name: ImageBase
    nameWithType: ImageBase
    fullName: ImageSharp.ImageBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.ColorBlindness
  commentId: T:ImageSharp.ColorBlindness
  parent: ImageSharp
  isExternal: false
  name: ColorBlindness
  nameWithType: ColorBlindness
  fullName: ImageSharp.ColorBlindness
- uid: ImageSharp.GrayscaleMode
  commentId: T:ImageSharp.GrayscaleMode
  parent: ImageSharp
  isExternal: false
  name: GrayscaleMode
  nameWithType: GrayscaleMode
  fullName: ImageSharp.GrayscaleMode
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: ImageSharp.Quantization
  commentId: T:ImageSharp.Quantization
  parent: ImageSharp
  isExternal: false
  name: Quantization
  nameWithType: Quantization
  fullName: ImageSharp.Quantization
- uid: ImageSharp.Quantizers.IQuantizer{{TColor},{TPacked}}
  commentId: T:ImageSharp.Quantizers.IQuantizer{``0,``1}
  parent: ImageSharp.Quantizers
  definition: ImageSharp.Quantizers.IQuantizer`2
  name: IQuantizer<TColor, TPacked>
  nameWithType: IQuantizer<TColor, TPacked>
  fullName: ImageSharp.Quantizers.IQuantizer<TColor, TPacked>
  nameWithType.vb: IQuantizer(Of TColor, TPacked)
  fullname.vb: ImageSharp.Quantizers.IQuantizer(Of TColor, TPacked)
  name.vb: IQuantizer(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Quantizers.IQuantizer`2
    name: IQuantizer
    nameWithType: IQuantizer
    fullName: ImageSharp.Quantizers.IQuantizer
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Quantizers.IQuantizer`2
    name: IQuantizer
    nameWithType: IQuantizer
    fullName: ImageSharp.Quantizers.IQuantizer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Quantizers.IQuantizer`2
  commentId: T:ImageSharp.Quantizers.IQuantizer`2
  isExternal: false
  name: IQuantizer<TColor, TPacked>
  nameWithType: IQuantizer<TColor, TPacked>
  fullName: ImageSharp.Quantizers.IQuantizer<TColor, TPacked>
  nameWithType.vb: IQuantizer(Of TColor, TPacked)
  fullname.vb: ImageSharp.Quantizers.IQuantizer(Of TColor, TPacked)
  name.vb: IQuantizer(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Quantizers.IQuantizer`2
    name: IQuantizer
    nameWithType: IQuantizer
    fullName: ImageSharp.Quantizers.IQuantizer
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Quantizers.IQuantizer`2
    name: IQuantizer
    nameWithType: IQuantizer
    fullName: ImageSharp.Quantizers.IQuantizer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Quantizers
  commentId: N:ImageSharp.Quantizers
  isExternal: false
  name: ImageSharp.Quantizers
  nameWithType: ImageSharp.Quantizers
  fullName: ImageSharp.Quantizers
- uid: ImageSharp.Processors.SobelProcessor`2
  commentId: T:ImageSharp.Processors.SobelProcessor`2
  isExternal: false
  name: SobelProcessor<TColor, TPacked>
  nameWithType: SobelProcessor<TColor, TPacked>
  fullName: ImageSharp.Processors.SobelProcessor<TColor, TPacked>
  nameWithType.vb: SobelProcessor(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.SobelProcessor(Of TColor, TPacked)
  name.vb: SobelProcessor(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.SobelProcessor`2
    name: SobelProcessor
    nameWithType: SobelProcessor
    fullName: ImageSharp.Processors.SobelProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.SobelProcessor`2
    name: SobelProcessor
    nameWithType: SobelProcessor
    fullName: ImageSharp.Processors.SobelProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.EdgeDetection
  commentId: T:ImageSharp.EdgeDetection
  parent: ImageSharp
  isExternal: false
  name: EdgeDetection
  nameWithType: EdgeDetection
  fullName: ImageSharp.EdgeDetection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ImageSharp.Processors.IEdgeDetectorFilter{{TColor},{TPacked}}
  commentId: T:ImageSharp.Processors.IEdgeDetectorFilter{``0,``1}
  parent: ImageSharp.Processors
  definition: ImageSharp.Processors.IEdgeDetectorFilter`2
  name: IEdgeDetectorFilter<TColor, TPacked>
  nameWithType: IEdgeDetectorFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.IEdgeDetectorFilter<TColor, TPacked>
  nameWithType.vb: IEdgeDetectorFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.IEdgeDetectorFilter(Of TColor, TPacked)
  name.vb: IEdgeDetectorFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.IEdgeDetectorFilter`2
    name: IEdgeDetectorFilter
    nameWithType: IEdgeDetectorFilter
    fullName: ImageSharp.Processors.IEdgeDetectorFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.IEdgeDetectorFilter`2
    name: IEdgeDetectorFilter
    nameWithType: IEdgeDetectorFilter
    fullName: ImageSharp.Processors.IEdgeDetectorFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors.IEdgeDetectorFilter`2
  commentId: T:ImageSharp.Processors.IEdgeDetectorFilter`2
  isExternal: false
  name: IEdgeDetectorFilter<TColor, TPacked>
  nameWithType: IEdgeDetectorFilter<TColor, TPacked>
  fullName: ImageSharp.Processors.IEdgeDetectorFilter<TColor, TPacked>
  nameWithType.vb: IEdgeDetectorFilter(Of TColor, TPacked)
  fullname.vb: ImageSharp.Processors.IEdgeDetectorFilter(Of TColor, TPacked)
  name.vb: IEdgeDetectorFilter(Of TColor, TPacked)
  spec.csharp:
  - uid: ImageSharp.Processors.IEdgeDetectorFilter`2
    name: IEdgeDetectorFilter
    nameWithType: IEdgeDetectorFilter
    fullName: ImageSharp.Processors.IEdgeDetectorFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ImageSharp.Processors.IEdgeDetectorFilter`2
    name: IEdgeDetectorFilter
    nameWithType: IEdgeDetectorFilter
    fullName: ImageSharp.Processors.IEdgeDetectorFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TColor
    nameWithType: TColor
    fullName: TColor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPacked
    nameWithType: TPacked
    fullName: TPacked
  - name: )
    nameWithType: )
    fullName: )
- uid: ImageSharp.Processors
  commentId: N:ImageSharp.Processors
  isExternal: false
  name: ImageSharp.Processors
  nameWithType: ImageSharp.Processors
  fullName: ImageSharp.Processors
- uid: ImageSharp.FlipType
  commentId: T:ImageSharp.FlipType
  parent: ImageSharp
  isExternal: false
  name: FlipType
  nameWithType: FlipType
  fullName: ImageSharp.FlipType
- uid: ImageSharp.ResizeOptions
  commentId: T:ImageSharp.ResizeOptions
  parent: ImageSharp
  isExternal: false
  name: ResizeOptions
  nameWithType: ResizeOptions
  fullName: ImageSharp.ResizeOptions
- uid: ImageSharp.IResampler
  commentId: T:ImageSharp.IResampler
  parent: ImageSharp
  isExternal: false
  name: IResampler
  nameWithType: IResampler
  fullName: ImageSharp.IResampler
- uid: ImageSharp.RotateType
  commentId: T:ImageSharp.RotateType
  parent: ImageSharp
  isExternal: false
  name: RotateType
  nameWithType: RotateType
  fullName: ImageSharp.RotateType
